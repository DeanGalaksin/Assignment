
HCSR04_Last_Try.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003590  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080036a0  080036a0  000136a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003704  08003704  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003704  08003704  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003704  08003704  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003704  08003704  00013704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003708  08003708  00013708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800370c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  20000070  0800377c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  0800377c  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008551  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001764  00000000  00000000  000285ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d8  00000000  00000000  00029d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000910  00000000  00000000  0002a728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000173d3  00000000  00000000  0002b038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a3f7  00000000  00000000  0004240b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085fd7  00000000  00000000  0004c802  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d27d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d48  00000000  00000000  000d282c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08003688 	.word	0x08003688

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08003688 	.word	0x08003688

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <Delay>:
#include "stm32f1xx_hal.h"
#include "main.h"
#include "LCD.h"
 
void Delay(uint32_t nCount)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  for(; nCount != 0; nCount--);
 8000934:	e002      	b.n	800093c <Delay+0x10>
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	3b01      	subs	r3, #1
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d1f9      	bne.n	8000936 <Delay+0xa>
}
 8000942:	bf00      	nop
 8000944:	bf00      	nop
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr

0800094e <lcd_delay>:
void lcd_delay(void)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	af00      	add	r7, sp, #0
 Delay(1000);
 8000952:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000956:	f7ff ffe9 	bl	800092c <Delay>
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <lcd_cmd>:

void lcd_cmd(char out_char)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	71fb      	strb	r3, [r7, #7]
 LCD_RS_GPIO_Port->BRR  = LCD_RS_Pin;
 800096a:	4b57      	ldr	r3, [pc, #348]	; (8000ac8 <lcd_cmd+0x168>)
 800096c:	2204      	movs	r2, #4
 800096e:	615a      	str	r2, [r3, #20]
 
 LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 8000970:	4b55      	ldr	r3, [pc, #340]	; (8000ac8 <lcd_cmd+0x168>)
 8000972:	2202      	movs	r2, #2
 8000974:	615a      	str	r2, [r3, #20]
 LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 8000976:	4b54      	ldr	r3, [pc, #336]	; (8000ac8 <lcd_cmd+0x168>)
 8000978:	2210      	movs	r2, #16
 800097a:	615a      	str	r2, [r3, #20]
 LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 800097c:	4b52      	ldr	r3, [pc, #328]	; (8000ac8 <lcd_cmd+0x168>)
 800097e:	2220      	movs	r2, #32
 8000980:	615a      	str	r2, [r3, #20]
 LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 8000982:	4b51      	ldr	r3, [pc, #324]	; (8000ac8 <lcd_cmd+0x168>)
 8000984:	2240      	movs	r2, #64	; 0x40
 8000986:	615a      	str	r2, [r3, #20]
 LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 8000988:	4b4f      	ldr	r3, [pc, #316]	; (8000ac8 <lcd_cmd+0x168>)
 800098a:	2280      	movs	r2, #128	; 0x80
 800098c:	615a      	str	r2, [r3, #20]
 
 lcd_delay();
 800098e:	f7ff ffde 	bl	800094e <lcd_delay>
 
 LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000992:	4b4d      	ldr	r3, [pc, #308]	; (8000ac8 <lcd_cmd+0x168>)
 8000994:	68db      	ldr	r3, [r3, #12]
 8000996:	4a4c      	ldr	r2, [pc, #304]	; (8000ac8 <lcd_cmd+0x168>)
 8000998:	f043 0302 	orr.w	r3, r3, #2
 800099c:	60d3      	str	r3, [r2, #12]
  
 if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	f003 0310 	and.w	r3, r3, #16
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d003      	beq.n	80009b0 <lcd_cmd+0x50>
 80009a8:	4b47      	ldr	r3, [pc, #284]	; (8000ac8 <lcd_cmd+0x168>)
 80009aa:	2210      	movs	r2, #16
 80009ac:	611a      	str	r2, [r3, #16]
 80009ae:	e003      	b.n	80009b8 <lcd_cmd+0x58>
 80009b0:	4b45      	ldr	r3, [pc, #276]	; (8000ac8 <lcd_cmd+0x168>)
 80009b2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80009b6:	611a      	str	r2, [r3, #16]
 if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	f003 0320 	and.w	r3, r3, #32
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d003      	beq.n	80009ca <lcd_cmd+0x6a>
 80009c2:	4b41      	ldr	r3, [pc, #260]	; (8000ac8 <lcd_cmd+0x168>)
 80009c4:	2220      	movs	r2, #32
 80009c6:	611a      	str	r2, [r3, #16]
 80009c8:	e003      	b.n	80009d2 <lcd_cmd+0x72>
 80009ca:	4b3f      	ldr	r3, [pc, #252]	; (8000ac8 <lcd_cmd+0x168>)
 80009cc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80009d0:	611a      	str	r2, [r3, #16]
 if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d003      	beq.n	80009e4 <lcd_cmd+0x84>
 80009dc:	4b3a      	ldr	r3, [pc, #232]	; (8000ac8 <lcd_cmd+0x168>)
 80009de:	2240      	movs	r2, #64	; 0x40
 80009e0:	611a      	str	r2, [r3, #16]
 80009e2:	e003      	b.n	80009ec <lcd_cmd+0x8c>
 80009e4:	4b38      	ldr	r3, [pc, #224]	; (8000ac8 <lcd_cmd+0x168>)
 80009e6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80009ea:	611a      	str	r2, [r3, #16]
 if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 80009ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	da03      	bge.n	80009fc <lcd_cmd+0x9c>
 80009f4:	4b34      	ldr	r3, [pc, #208]	; (8000ac8 <lcd_cmd+0x168>)
 80009f6:	2280      	movs	r2, #128	; 0x80
 80009f8:	611a      	str	r2, [r3, #16]
 80009fa:	e003      	b.n	8000a04 <lcd_cmd+0xa4>
 80009fc:	4b32      	ldr	r3, [pc, #200]	; (8000ac8 <lcd_cmd+0x168>)
 80009fe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a02:	611a      	str	r2, [r3, #16]
 
 lcd_delay();
 8000a04:	f7ff ffa3 	bl	800094e <lcd_delay>
 
 LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000a08:	4b2f      	ldr	r3, [pc, #188]	; (8000ac8 <lcd_cmd+0x168>)
 8000a0a:	2202      	movs	r2, #2
 8000a0c:	615a      	str	r2, [r3, #20]
 LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8000a0e:	4b2e      	ldr	r3, [pc, #184]	; (8000ac8 <lcd_cmd+0x168>)
 8000a10:	2210      	movs	r2, #16
 8000a12:	615a      	str	r2, [r3, #20]
 LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000a14:	4b2c      	ldr	r3, [pc, #176]	; (8000ac8 <lcd_cmd+0x168>)
 8000a16:	2220      	movs	r2, #32
 8000a18:	615a      	str	r2, [r3, #20]
 LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000a1a:	4b2b      	ldr	r3, [pc, #172]	; (8000ac8 <lcd_cmd+0x168>)
 8000a1c:	2240      	movs	r2, #64	; 0x40
 8000a1e:	615a      	str	r2, [r3, #20]
 LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000a20:	4b29      	ldr	r3, [pc, #164]	; (8000ac8 <lcd_cmd+0x168>)
 8000a22:	2280      	movs	r2, #128	; 0x80
 8000a24:	615a      	str	r2, [r3, #20]
 
 lcd_delay();
 8000a26:	f7ff ff92 	bl	800094e <lcd_delay>
 
 LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000a2a:	4b27      	ldr	r3, [pc, #156]	; (8000ac8 <lcd_cmd+0x168>)
 8000a2c:	68db      	ldr	r3, [r3, #12]
 8000a2e:	4a26      	ldr	r2, [pc, #152]	; (8000ac8 <lcd_cmd+0x168>)
 8000a30:	f043 0302 	orr.w	r3, r3, #2
 8000a34:	60d3      	str	r3, [r2, #12]
 
 if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	f003 0301 	and.w	r3, r3, #1
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d003      	beq.n	8000a48 <lcd_cmd+0xe8>
 8000a40:	4b21      	ldr	r3, [pc, #132]	; (8000ac8 <lcd_cmd+0x168>)
 8000a42:	2210      	movs	r2, #16
 8000a44:	611a      	str	r2, [r3, #16]
 8000a46:	e003      	b.n	8000a50 <lcd_cmd+0xf0>
 8000a48:	4b1f      	ldr	r3, [pc, #124]	; (8000ac8 <lcd_cmd+0x168>)
 8000a4a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000a4e:	611a      	str	r2, [r3, #16]
 if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	f003 0302 	and.w	r3, r3, #2
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d003      	beq.n	8000a62 <lcd_cmd+0x102>
 8000a5a:	4b1b      	ldr	r3, [pc, #108]	; (8000ac8 <lcd_cmd+0x168>)
 8000a5c:	2220      	movs	r2, #32
 8000a5e:	611a      	str	r2, [r3, #16]
 8000a60:	e003      	b.n	8000a6a <lcd_cmd+0x10a>
 8000a62:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <lcd_cmd+0x168>)
 8000a64:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000a68:	611a      	str	r2, [r3, #16]
 if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	f003 0304 	and.w	r3, r3, #4
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d003      	beq.n	8000a7c <lcd_cmd+0x11c>
 8000a74:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <lcd_cmd+0x168>)
 8000a76:	2240      	movs	r2, #64	; 0x40
 8000a78:	611a      	str	r2, [r3, #16]
 8000a7a:	e003      	b.n	8000a84 <lcd_cmd+0x124>
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <lcd_cmd+0x168>)
 8000a7e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000a82:	611a      	str	r2, [r3, #16]
 if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	f003 0308 	and.w	r3, r3, #8
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d003      	beq.n	8000a96 <lcd_cmd+0x136>
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <lcd_cmd+0x168>)
 8000a90:	2280      	movs	r2, #128	; 0x80
 8000a92:	611a      	str	r2, [r3, #16]
 8000a94:	e003      	b.n	8000a9e <lcd_cmd+0x13e>
 8000a96:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <lcd_cmd+0x168>)
 8000a98:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a9c:	611a      	str	r2, [r3, #16]

 lcd_delay();
 8000a9e:	f7ff ff56 	bl	800094e <lcd_delay>
 
 LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000aa2:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <lcd_cmd+0x168>)
 8000aa4:	2202      	movs	r2, #2
 8000aa6:	615a      	str	r2, [r3, #20]
 LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8000aa8:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <lcd_cmd+0x168>)
 8000aaa:	2210      	movs	r2, #16
 8000aac:	615a      	str	r2, [r3, #20]
 LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <lcd_cmd+0x168>)
 8000ab0:	2220      	movs	r2, #32
 8000ab2:	615a      	str	r2, [r3, #20]
 LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000ab4:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <lcd_cmd+0x168>)
 8000ab6:	2240      	movs	r2, #64	; 0x40
 8000ab8:	615a      	str	r2, [r3, #20]
 LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000aba:	4b03      	ldr	r3, [pc, #12]	; (8000ac8 <lcd_cmd+0x168>)
 8000abc:	2280      	movs	r2, #128	; 0x80
 8000abe:	615a      	str	r2, [r3, #20]
}
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40010800 	.word	0x40010800

08000acc <lcd_char_cp>:

void lcd_char_cp(char out_char)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	71fb      	strb	r3, [r7, #7]
 LCD_RS_GPIO_Port->ODR |= LCD_RS_Pin;
 8000ad6:	4b59      	ldr	r3, [pc, #356]	; (8000c3c <lcd_char_cp+0x170>)
 8000ad8:	68db      	ldr	r3, [r3, #12]
 8000ada:	4a58      	ldr	r2, [pc, #352]	; (8000c3c <lcd_char_cp+0x170>)
 8000adc:	f043 0304 	orr.w	r3, r3, #4
 8000ae0:	60d3      	str	r3, [r2, #12]
 
 LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 8000ae2:	4b56      	ldr	r3, [pc, #344]	; (8000c3c <lcd_char_cp+0x170>)
 8000ae4:	2202      	movs	r2, #2
 8000ae6:	615a      	str	r2, [r3, #20]
 LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 8000ae8:	4b54      	ldr	r3, [pc, #336]	; (8000c3c <lcd_char_cp+0x170>)
 8000aea:	2210      	movs	r2, #16
 8000aec:	615a      	str	r2, [r3, #20]
 LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 8000aee:	4b53      	ldr	r3, [pc, #332]	; (8000c3c <lcd_char_cp+0x170>)
 8000af0:	2220      	movs	r2, #32
 8000af2:	615a      	str	r2, [r3, #20]
 LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 8000af4:	4b51      	ldr	r3, [pc, #324]	; (8000c3c <lcd_char_cp+0x170>)
 8000af6:	2240      	movs	r2, #64	; 0x40
 8000af8:	615a      	str	r2, [r3, #20]
 LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 8000afa:	4b50      	ldr	r3, [pc, #320]	; (8000c3c <lcd_char_cp+0x170>)
 8000afc:	2280      	movs	r2, #128	; 0x80
 8000afe:	615a      	str	r2, [r3, #20]
 
 lcd_delay();
 8000b00:	f7ff ff25 	bl	800094e <lcd_delay>
 
 LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000b04:	4b4d      	ldr	r3, [pc, #308]	; (8000c3c <lcd_char_cp+0x170>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	4a4c      	ldr	r2, [pc, #304]	; (8000c3c <lcd_char_cp+0x170>)
 8000b0a:	f043 0302 	orr.w	r3, r3, #2
 8000b0e:	60d3      	str	r3, [r2, #12]
  
 if((out_char & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	f003 0310 	and.w	r3, r3, #16
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d003      	beq.n	8000b22 <lcd_char_cp+0x56>
 8000b1a:	4b48      	ldr	r3, [pc, #288]	; (8000c3c <lcd_char_cp+0x170>)
 8000b1c:	2210      	movs	r2, #16
 8000b1e:	611a      	str	r2, [r3, #16]
 8000b20:	e003      	b.n	8000b2a <lcd_char_cp+0x5e>
 8000b22:	4b46      	ldr	r3, [pc, #280]	; (8000c3c <lcd_char_cp+0x170>)
 8000b24:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000b28:	611a      	str	r2, [r3, #16]
 if((out_char & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	f003 0320 	and.w	r3, r3, #32
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d003      	beq.n	8000b3c <lcd_char_cp+0x70>
 8000b34:	4b41      	ldr	r3, [pc, #260]	; (8000c3c <lcd_char_cp+0x170>)
 8000b36:	2220      	movs	r2, #32
 8000b38:	611a      	str	r2, [r3, #16]
 8000b3a:	e003      	b.n	8000b44 <lcd_char_cp+0x78>
 8000b3c:	4b3f      	ldr	r3, [pc, #252]	; (8000c3c <lcd_char_cp+0x170>)
 8000b3e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000b42:	611a      	str	r2, [r3, #16]
 if((out_char & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d003      	beq.n	8000b56 <lcd_char_cp+0x8a>
 8000b4e:	4b3b      	ldr	r3, [pc, #236]	; (8000c3c <lcd_char_cp+0x170>)
 8000b50:	2240      	movs	r2, #64	; 0x40
 8000b52:	611a      	str	r2, [r3, #16]
 8000b54:	e003      	b.n	8000b5e <lcd_char_cp+0x92>
 8000b56:	4b39      	ldr	r3, [pc, #228]	; (8000c3c <lcd_char_cp+0x170>)
 8000b58:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000b5c:	611a      	str	r2, [r3, #16]
 if((out_char & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	da03      	bge.n	8000b6e <lcd_char_cp+0xa2>
 8000b66:	4b35      	ldr	r3, [pc, #212]	; (8000c3c <lcd_char_cp+0x170>)
 8000b68:	2280      	movs	r2, #128	; 0x80
 8000b6a:	611a      	str	r2, [r3, #16]
 8000b6c:	e003      	b.n	8000b76 <lcd_char_cp+0xaa>
 8000b6e:	4b33      	ldr	r3, [pc, #204]	; (8000c3c <lcd_char_cp+0x170>)
 8000b70:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000b74:	611a      	str	r2, [r3, #16]
 
 lcd_delay();
 8000b76:	f7ff feea 	bl	800094e <lcd_delay>
 
 LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000b7a:	4b30      	ldr	r3, [pc, #192]	; (8000c3c <lcd_char_cp+0x170>)
 8000b7c:	2202      	movs	r2, #2
 8000b7e:	615a      	str	r2, [r3, #20]
 LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8000b80:	4b2e      	ldr	r3, [pc, #184]	; (8000c3c <lcd_char_cp+0x170>)
 8000b82:	2210      	movs	r2, #16
 8000b84:	615a      	str	r2, [r3, #20]
 LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000b86:	4b2d      	ldr	r3, [pc, #180]	; (8000c3c <lcd_char_cp+0x170>)
 8000b88:	2220      	movs	r2, #32
 8000b8a:	615a      	str	r2, [r3, #20]
 LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000b8c:	4b2b      	ldr	r3, [pc, #172]	; (8000c3c <lcd_char_cp+0x170>)
 8000b8e:	2240      	movs	r2, #64	; 0x40
 8000b90:	615a      	str	r2, [r3, #20]
 LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000b92:	4b2a      	ldr	r3, [pc, #168]	; (8000c3c <lcd_char_cp+0x170>)
 8000b94:	2280      	movs	r2, #128	; 0x80
 8000b96:	615a      	str	r2, [r3, #20]
 
 lcd_delay();
 8000b98:	f7ff fed9 	bl	800094e <lcd_delay>
 
 LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000b9c:	4b27      	ldr	r3, [pc, #156]	; (8000c3c <lcd_char_cp+0x170>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	4a26      	ldr	r2, [pc, #152]	; (8000c3c <lcd_char_cp+0x170>)
 8000ba2:	f043 0302 	orr.w	r3, r3, #2
 8000ba6:	60d3      	str	r3, [r2, #12]
 
 if(out_char & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d003      	beq.n	8000bba <lcd_char_cp+0xee>
 8000bb2:	4b22      	ldr	r3, [pc, #136]	; (8000c3c <lcd_char_cp+0x170>)
 8000bb4:	2210      	movs	r2, #16
 8000bb6:	611a      	str	r2, [r3, #16]
 8000bb8:	e003      	b.n	8000bc2 <lcd_char_cp+0xf6>
 8000bba:	4b20      	ldr	r3, [pc, #128]	; (8000c3c <lcd_char_cp+0x170>)
 8000bbc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000bc0:	611a      	str	r2, [r3, #16]
 if((out_char & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	f003 0302 	and.w	r3, r3, #2
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d003      	beq.n	8000bd4 <lcd_char_cp+0x108>
 8000bcc:	4b1b      	ldr	r3, [pc, #108]	; (8000c3c <lcd_char_cp+0x170>)
 8000bce:	2220      	movs	r2, #32
 8000bd0:	611a      	str	r2, [r3, #16]
 8000bd2:	e003      	b.n	8000bdc <lcd_char_cp+0x110>
 8000bd4:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <lcd_char_cp+0x170>)
 8000bd6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000bda:	611a      	str	r2, [r3, #16]
 if((out_char & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	f003 0304 	and.w	r3, r3, #4
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d003      	beq.n	8000bee <lcd_char_cp+0x122>
 8000be6:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <lcd_char_cp+0x170>)
 8000be8:	2240      	movs	r2, #64	; 0x40
 8000bea:	611a      	str	r2, [r3, #16]
 8000bec:	e003      	b.n	8000bf6 <lcd_char_cp+0x12a>
 8000bee:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <lcd_char_cp+0x170>)
 8000bf0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000bf4:	611a      	str	r2, [r3, #16]
 if((out_char & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	f003 0308 	and.w	r3, r3, #8
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d003      	beq.n	8000c08 <lcd_char_cp+0x13c>
 8000c00:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <lcd_char_cp+0x170>)
 8000c02:	2280      	movs	r2, #128	; 0x80
 8000c04:	611a      	str	r2, [r3, #16]
 8000c06:	e003      	b.n	8000c10 <lcd_char_cp+0x144>
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <lcd_char_cp+0x170>)
 8000c0a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000c0e:	611a      	str	r2, [r3, #16]

 lcd_delay();
 8000c10:	f7ff fe9d 	bl	800094e <lcd_delay>
 
 LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000c14:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <lcd_char_cp+0x170>)
 8000c16:	2202      	movs	r2, #2
 8000c18:	615a      	str	r2, [r3, #20]
 LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8000c1a:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <lcd_char_cp+0x170>)
 8000c1c:	2210      	movs	r2, #16
 8000c1e:	615a      	str	r2, [r3, #20]
 LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <lcd_char_cp+0x170>)
 8000c22:	2220      	movs	r2, #32
 8000c24:	615a      	str	r2, [r3, #20]
 LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000c26:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <lcd_char_cp+0x170>)
 8000c28:	2240      	movs	r2, #64	; 0x40
 8000c2a:	615a      	str	r2, [r3, #20]
 LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000c2c:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <lcd_char_cp+0x170>)
 8000c2e:	2280      	movs	r2, #128	; 0x80
 8000c30:	615a      	str	r2, [r3, #20]
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40010800 	.word	0x40010800

08000c40 <lcd_out_cp>:

void lcd_out_cp(char *out_char)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 while(*out_char)
 8000c48:	e008      	b.n	8000c5c <lcd_out_cp+0x1c>
 {
  lcd_delay();
 8000c4a:	f7ff fe80 	bl	800094e <lcd_delay>
  lcd_char_cp(*out_char++);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	1c5a      	adds	r2, r3, #1
 8000c52:	607a      	str	r2, [r7, #4]
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff ff38 	bl	8000acc <lcd_char_cp>
 while(*out_char)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d1f2      	bne.n	8000c4a <lcd_out_cp+0xa>
 }
 lcd_delay();
 8000c64:	f7ff fe73 	bl	800094e <lcd_delay>
}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <lcd_init>:


void lcd_init(char bits, char font, char lines)
{  
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	71bb      	strb	r3, [r7, #6]
 8000c7e:	4613      	mov	r3, r2
 8000c80:	717b      	strb	r3, [r7, #5]
    HAL_Delay(250);
 8000c82:	20fa      	movs	r0, #250	; 0xfa
 8000c84:	f000 fc66 	bl	8001554 <HAL_Delay>
 lcd_cmd(_RETURN_HOME);
 8000c88:	2002      	movs	r0, #2
 8000c8a:	f7ff fe69 	bl	8000960 <lcd_cmd>
    HAL_Delay(50);
 8000c8e:	2032      	movs	r0, #50	; 0x32
 8000c90:	f000 fc60 	bl	8001554 <HAL_Delay>
    lcd_cmd(0x20 | bits | font | lines);
 8000c94:	79fa      	ldrb	r2, [r7, #7]
 8000c96:	79bb      	ldrb	r3, [r7, #6]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	797b      	ldrb	r3, [r7, #5]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	f043 0320 	orr.w	r3, r3, #32
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff fe59 	bl	8000960 <lcd_cmd>
    HAL_Delay(50);
 8000cae:	2032      	movs	r0, #50	; 0x32
 8000cb0:	f000 fc50 	bl	8001554 <HAL_Delay>
    lcd_cmd(_LCD_INIT);
 8000cb4:	2006      	movs	r0, #6
 8000cb6:	f7ff fe53 	bl	8000960 <lcd_cmd>
    HAL_Delay(50);
 8000cba:	2032      	movs	r0, #50	; 0x32
 8000cbc:	f000 fc4a 	bl	8001554 <HAL_Delay>
    lcd_cmd(0x0E);
 8000cc0:	200e      	movs	r0, #14
 8000cc2:	f7ff fe4d 	bl	8000960 <lcd_cmd>
    HAL_Delay(50);
 8000cc6:	2032      	movs	r0, #50	; 0x32
 8000cc8:	f000 fc44 	bl	8001554 <HAL_Delay>
    lcd_cmd(0x0C);
 8000ccc:	200c      	movs	r0, #12
 8000cce:	f7ff fe47 	bl	8000960 <lcd_cmd>
    HAL_Delay(50);
 8000cd2:	2032      	movs	r0, #50	; 0x32
 8000cd4:	f000 fc3e 	bl	8001554 <HAL_Delay>
    lcd_cmd(0x01);
 8000cd8:	2001      	movs	r0, #1
 8000cda:	f7ff fe41 	bl	8000960 <lcd_cmd>
    HAL_Delay(100);
 8000cde:	2064      	movs	r0, #100	; 0x64
 8000ce0:	f000 fc38 	bl	8001554 <HAL_Delay>
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column)
{ 
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	460a      	mov	r2, r1
 8000cf6:	71fb      	strb	r3, [r7, #7]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	71bb      	strb	r3, [r7, #6]
 if(row == 1)
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d106      	bne.n	8000d10 <lcd_gotoxy+0x24>
 {
  lcd_cmd(0x80 + (column - 1));
 8000d02:	79bb      	ldrb	r3, [r7, #6]
 8000d04:	337f      	adds	r3, #127	; 0x7f
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff fe29 	bl	8000960 <lcd_cmd>
 }
 else if(row == 2)
 {
  lcd_cmd(0xC0 + (column - 1));
 } 
}
 8000d0e:	e008      	b.n	8000d22 <lcd_gotoxy+0x36>
 else if(row == 2)
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d105      	bne.n	8000d22 <lcd_gotoxy+0x36>
  lcd_cmd(0xC0 + (column - 1));
 8000d16:	79bb      	ldrb	r3, [r7, #6]
 8000d18:	3b41      	subs	r3, #65	; 0x41
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fe1f 	bl	8000960 <lcd_cmd>
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <lcd_print>:
 lcd_gotoxy(row, column);
 lcd_char_cp(out_char);
}

void lcd_print(unsigned char row, unsigned char column, char *out_char)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	4603      	mov	r3, r0
 8000d32:	603a      	str	r2, [r7, #0]
 8000d34:	71fb      	strb	r3, [r7, #7]
 8000d36:	460b      	mov	r3, r1
 8000d38:	71bb      	strb	r3, [r7, #6]
 lcd_gotoxy(row, column);
 8000d3a:	79ba      	ldrb	r2, [r7, #6]
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	4611      	mov	r1, r2
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff ffd3 	bl	8000cec <lcd_gotoxy>
 lcd_out_cp(out_char);
 8000d46:	6838      	ldr	r0, [r7, #0]
 8000d48:	f7ff ff7a 	bl	8000c40 <lcd_out_cp>
}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <delay_us>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay_us (uint16_t us)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim1,0);  // counter degerini 0 olarak belirle
 8000d5e:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <delay_us+0x2c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2200      	movs	r2, #0
 8000d64:	625a      	str	r2, [r3, #36]	; 0x24
  	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // counter'in istenilen degere ulasmasini bekle
 8000d66:	bf00      	nop
 8000d68:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <delay_us+0x2c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d6e:	88fb      	ldrh	r3, [r7, #6]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d3f9      	bcc.n	8000d68 <delay_us+0x14>
}
 8000d74:	bf00      	nop
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr
 8000d80:	2000008c 	.word	0x2000008c
 8000d84:	00000000 	.word	0x00000000

08000d88 <HAL_TIM_IC_CaptureCallback>:

#define TRIG_PIN GPIO_PIN_9
#define TRIG_PORT GPIOA

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) //fonksiyonumuz, timer 1 de kullandigimiz input capture modu ile atimin genisligini olcmeyi hesaplamayi hedeflemektedir
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	7f1b      	ldrb	r3, [r3, #28]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	f040 8083 	bne.w	8000ea0 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // ilk deger daha alinmadiysa
 8000d9a:	4b45      	ldr	r3, [pc, #276]	; (8000eb0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d11a      	bne.n	8000dd8 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			First_Val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // aradaki zamani olcmek istediğim ilk degeri timer'da oku
 8000da2:	2100      	movs	r1, #0
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f001 fd6d 	bl	8002884 <HAL_TIM_ReadCapturedValue>
 8000daa:	4603      	mov	r3, r0
 8000dac:	4a41      	ldr	r2, [pc, #260]	; (8000eb4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000dae:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // ilk degerin alindigini belirt
 8000db0:	4b3f      	ldr	r3, [pc, #252]	; (8000eb0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING); //Bir nevi zamanlayiciyi baslatma, Timer1 deki frekansin high ya da low olmasini sagliyor
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	6a1a      	ldr	r2, [r3, #32]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f022 020a 	bic.w	r2, r2, #10
 8000dc4:	621a      	str	r2, [r3, #32]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	6a1a      	ldr	r2, [r3, #32]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f042 0202 	orr.w	r2, r2, #2
 8000dd4:	621a      	str	r2, [r3, #32]
			Is_First_Captured = 0; // fonksiyon basa donduğunde yeniden sayma yapabilmesi icin sıfıra aldık
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8000dd6:	e063      	b.n	8000ea0 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // okunan ikinci deger olacaksa aradaki fark icin fonksiyona gir
 8000dd8:	4b35      	ldr	r3, [pc, #212]	; (8000eb0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d15f      	bne.n	8000ea0 <HAL_TIM_IC_CaptureCallback+0x118>
			Second_Val = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // ikinci degeri oku
 8000de0:	2100      	movs	r1, #0
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f001 fd4e 	bl	8002884 <HAL_TIM_ReadCapturedValue>
 8000de8:	4603      	mov	r3, r0
 8000dea:	4a33      	ldr	r2, [pc, #204]	; (8000eb8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000dec:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // zamanlayiciyi 0'a cek, yani sifirla
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2200      	movs	r2, #0
 8000df4:	625a      	str	r2, [r3, #36]	; 0x24
			if (Second_Val > First_Val)	//aradaki farki almak için çıkar
 8000df6:	4b30      	ldr	r3, [pc, #192]	; (8000eb8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	4b2e      	ldr	r3, [pc, #184]	; (8000eb4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d907      	bls.n	8000e12 <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = Second_Val - First_Val;
 8000e02:	4b2d      	ldr	r3, [pc, #180]	; (8000eb8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	4b2b      	ldr	r3, [pc, #172]	; (8000eb4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	4a2b      	ldr	r2, [pc, #172]	; (8000ebc <HAL_TIM_IC_CaptureCallback+0x134>)
 8000e0e:	6013      	str	r3, [r2, #0]
 8000e10:	e00f      	b.n	8000e32 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (First_Val > Second_Val) //counter yonu yukari ama farkli olursa yani 0 dan 65536 ya saymak yerine 65536'dan tersine giderse aradaki farki almak icin
 8000e12:	4b28      	ldr	r3, [pc, #160]	; (8000eb4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	4b28      	ldr	r3, [pc, #160]	; (8000eb8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d909      	bls.n	8000e32 <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - First_Val) + Second_Val;
 8000e1e:	4b26      	ldr	r3, [pc, #152]	; (8000eb8 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	4b24      	ldr	r3, [pc, #144]	; (8000eb4 <HAL_TIM_IC_CaptureCallback+0x12c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000e2c:	33ff      	adds	r3, #255	; 0xff
 8000e2e:	4a23      	ldr	r2, [pc, #140]	; (8000ebc <HAL_TIM_IC_CaptureCallback+0x134>)
 8000e30:	6013      	str	r3, [r2, #0]
			Distance = Difference * 0.311/2; //Normalde datasheet'de formulu vardi ancak hata payi olusuyordu biraz, degerleri bir tik degistirerek kistim o hata payini.
 8000e32:	4b22      	ldr	r3, [pc, #136]	; (8000ebc <HAL_TIM_IC_CaptureCallback+0x134>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff facc 	bl	80003d4 <__aeabi_ui2d>
 8000e3c:	a31a      	add	r3, pc, #104	; (adr r3, 8000ea8 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e42:	f7ff fb41 	bl	80004c8 <__aeabi_dmul>
 8000e46:	4602      	mov	r2, r0
 8000e48:	460b      	mov	r3, r1
 8000e4a:	4610      	mov	r0, r2
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f04f 0200 	mov.w	r2, #0
 8000e52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e56:	f7ff fc61 	bl	800071c <__aeabi_ddiv>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	4610      	mov	r0, r2
 8000e60:	4619      	mov	r1, r3
 8000e62:	f7ff fd43 	bl	80008ec <__aeabi_d2uiz>
 8000e66:	4603      	mov	r3, r0
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000e6c:	801a      	strh	r2, [r3, #0]
			Is_First_Captured = 0; // fonksiyon basa donduğunde yeniden sayma yapabilmesi icin sıfıra aldık
 8000e6e:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	6a1a      	ldr	r2, [r3, #32]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f022 020a 	bic.w	r2, r2, #10
 8000e82:	621a      	str	r2, [r3, #32]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	6a12      	ldr	r2, [r2, #32]
 8000e8e:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	68da      	ldr	r2, [r3, #12]
 8000e96:	4b0b      	ldr	r3, [pc, #44]	; (8000ec4 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f022 0202 	bic.w	r2, r2, #2
 8000e9e:	60da      	str	r2, [r3, #12]
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	8b439581 	.word	0x8b439581
 8000eac:	3fd3e76c 	.word	0x3fd3e76c
 8000eb0:	200000e0 	.word	0x200000e0
 8000eb4:	200000d4 	.word	0x200000d4
 8000eb8:	200000d8 	.word	0x200000d8
 8000ebc:	200000dc 	.word	0x200000dc
 8000ec0:	200000e2 	.word	0x200000e2
 8000ec4:	2000008c 	.word	0x2000008c

08000ec8 <HCSR04_Read>:
void HCSR04_Read (void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // Sinyali gonderdigimiz Trig pinini çalıştır
 8000ecc:	2201      	movs	r2, #1
 8000ece:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ed2:	480b      	ldr	r0, [pc, #44]	; (8000f00 <HCSR04_Read+0x38>)
 8000ed4:	f000 fdec 	bl	8001ab0 <HAL_GPIO_WritePin>
	delay_us(10);  // 10 mikro saniye bekle
 8000ed8:	200a      	movs	r0, #10
 8000eda:	f7ff ff3b 	bl	8000d54 <delay_us>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // Sinyali gonderdigimiz Trig pinini durdur
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ee4:	4806      	ldr	r0, [pc, #24]	; (8000f00 <HCSR04_Read+0x38>)
 8000ee6:	f000 fde3 	bl	8001ab0 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1); //interrupt ederek timer kullan
 8000eea:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <HCSR04_Read+0x3c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	68da      	ldr	r2, [r3, #12]
 8000ef0:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <HCSR04_Read+0x3c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f042 0202 	orr.w	r2, r2, #2
 8000ef8:	60da      	str	r2, [r3, #12]
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40010800 	.word	0x40010800
 8000f04:	2000008c 	.word	0x2000008c

08000f08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b090      	sub	sp, #64	; 0x40
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f0e:	f000 fabf 	bl	8001490 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f12:	f000 f8ab 	bl	800106c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f16:	f000 f945 	bl	80011a4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000f1a:	f000 f8ed 	bl	80010f8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim1,TIM_CHANNEL_1);
 8000f1e:	2100      	movs	r1, #0
 8000f20:	484c      	ldr	r0, [pc, #304]	; (8001054 <main+0x14c>)
 8000f22:	f001 fa15 	bl	8002350 <HAL_TIM_IC_Start_IT>
  lcd_init(_LCD_4BIT, _LCD_FONT_5x8, _LCD_2LINE); //LCD'yi calistir
 8000f26:	2208      	movs	r2, #8
 8000f28:	2100      	movs	r1, #0
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f7ff fea0 	bl	8000c70 <lcd_init>
  char lcd_uzunluk [64] = " "; //LCD kutuphanemiz, int yazamadiği icin int'i char'a donusturmek icin gecici bir alan
 8000f30:	2320      	movs	r3, #32
 8000f32:	603b      	str	r3, [r7, #0]
 8000f34:	1d3b      	adds	r3, r7, #4
 8000f36:	223c      	movs	r2, #60	; 0x3c
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f001 ff22 	bl	8002d84 <memset>
  lcd_print(1,1,"Mesafe"); //LCD'nin ilk satirina Mesafe yaz
 8000f40:	4a45      	ldr	r2, [pc, #276]	; (8001058 <main+0x150>)
 8000f42:	2101      	movs	r1, #1
 8000f44:	2001      	movs	r0, #1
 8000f46:	f7ff fef0 	bl	8000d2a <lcd_print>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HCSR04_Read(); //Mesafeyi olcen sensor degerini olcmek icin fonksiyonu calistir
 8000f4a:	f7ff ffbd 	bl	8000ec8 <HCSR04_Read>
	  sprintf(lcd_uzunluk,"%d",Distance); //Distance olarak olctugumuz mesafe degerini az once olusturudugumuz gecici char alana yazdir
 8000f4e:	4b43      	ldr	r3, [pc, #268]	; (800105c <main+0x154>)
 8000f50:	881b      	ldrh	r3, [r3, #0]
 8000f52:	461a      	mov	r2, r3
 8000f54:	463b      	mov	r3, r7
 8000f56:	4942      	ldr	r1, [pc, #264]	; (8001060 <main+0x158>)
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f001 ff1b 	bl	8002d94 <siprintf>
	  lcd_print(2,1,lcd_uzunluk); //Uzunlugu char cinsinden yaz
 8000f5e:	463b      	mov	r3, r7
 8000f60:	461a      	mov	r2, r3
 8000f62:	2101      	movs	r1, #1
 8000f64:	2002      	movs	r0, #2
 8000f66:	f7ff fee0 	bl	8000d2a <lcd_print>
	  lcd_print(2,5,"CM");	//yanina da CM yaz
 8000f6a:	4a3e      	ldr	r2, [pc, #248]	; (8001064 <main+0x15c>)
 8000f6c:	2105      	movs	r1, #5
 8000f6e:	2002      	movs	r0, #2
 8000f70:	f7ff fedb 	bl	8000d2a <lcd_print>
	  HAL_Delay(20);
 8000f74:	2014      	movs	r0, #20
 8000f76:	f000 faed 	bl	8001554 <HAL_Delay>

	  if(Distance<300 && Distance>0)  //Mesafe 0 ile 300 arasinda ise istenilen yonde motor dondur ve ısık yak
 8000f7a:	4b38      	ldr	r3, [pc, #224]	; (800105c <main+0x154>)
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000f82:	d21f      	bcs.n	8000fc4 <main+0xbc>
 8000f84:	4b35      	ldr	r3, [pc, #212]	; (800105c <main+0x154>)
 8000f86:	881b      	ldrh	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d01b      	beq.n	8000fc4 <main+0xbc>
	  {
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2108      	movs	r1, #8
 8000f90:	4835      	ldr	r0, [pc, #212]	; (8001068 <main+0x160>)
 8000f92:	f000 fd8d 	bl	8001ab0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000f96:	2201      	movs	r2, #1
 8000f98:	2110      	movs	r1, #16
 8000f9a:	4833      	ldr	r0, [pc, #204]	; (8001068 <main+0x160>)
 8000f9c:	f000 fd88 	bl	8001ab0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	2120      	movs	r1, #32
 8000fa4:	4830      	ldr	r0, [pc, #192]	; (8001068 <main+0x160>)
 8000fa6:	f000 fd83 	bl	8001ab0 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fb0:	482d      	ldr	r0, [pc, #180]	; (8001068 <main+0x160>)
 8000fb2:	f000 fd7d 	bl	8001ab0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fbc:	482a      	ldr	r0, [pc, #168]	; (8001068 <main+0x160>)
 8000fbe:	f000 fd77 	bl	8001ab0 <HAL_GPIO_WritePin>
 8000fc2:	e045      	b.n	8001050 <main+0x148>
	  }
	  else if(Distance>=300 && Distance <400) //Mesafe 300 ile 400 arasinda ise istenilen yonde motor dondur (durdur) ve ısık yak
 8000fc4:	4b25      	ldr	r3, [pc, #148]	; (800105c <main+0x154>)
 8000fc6:	881b      	ldrh	r3, [r3, #0]
 8000fc8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000fcc:	d320      	bcc.n	8001010 <main+0x108>
 8000fce:	4b23      	ldr	r3, [pc, #140]	; (800105c <main+0x154>)
 8000fd0:	881b      	ldrh	r3, [r3, #0]
 8000fd2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000fd6:	d21b      	bcs.n	8001010 <main+0x108>
	  {
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	2108      	movs	r1, #8
 8000fdc:	4822      	ldr	r0, [pc, #136]	; (8001068 <main+0x160>)
 8000fde:	f000 fd67 	bl	8001ab0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2110      	movs	r1, #16
 8000fe6:	4820      	ldr	r0, [pc, #128]	; (8001068 <main+0x160>)
 8000fe8:	f000 fd62 	bl	8001ab0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);
 8000fec:	2201      	movs	r2, #1
 8000fee:	2120      	movs	r1, #32
 8000ff0:	481d      	ldr	r0, [pc, #116]	; (8001068 <main+0x160>)
 8000ff2:	f000 fd5d 	bl	8001ab0 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_SET);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ffc:	481a      	ldr	r0, [pc, #104]	; (8001068 <main+0x160>)
 8000ffe:	f000 fd57 	bl	8001ab0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_SET);
 8001002:	2201      	movs	r2, #1
 8001004:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001008:	4817      	ldr	r0, [pc, #92]	; (8001068 <main+0x160>)
 800100a:	f000 fd51 	bl	8001ab0 <HAL_GPIO_WritePin>
 800100e:	e01f      	b.n	8001050 <main+0x148>
	  }
	  else if(Distance>=400) //Mesafe 400'den buyuk ise istenilen yonde motor dondur ve ısık yak
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <main+0x154>)
 8001012:	881b      	ldrh	r3, [r3, #0]
 8001014:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001018:	d397      	bcc.n	8000f4a <main+0x42>
	  {
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 800101a:	2201      	movs	r2, #1
 800101c:	2108      	movs	r1, #8
 800101e:	4812      	ldr	r0, [pc, #72]	; (8001068 <main+0x160>)
 8001020:	f000 fd46 	bl	8001ab0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8001024:	2201      	movs	r2, #1
 8001026:	2110      	movs	r1, #16
 8001028:	480f      	ldr	r0, [pc, #60]	; (8001068 <main+0x160>)
 800102a:	f000 fd41 	bl	8001ab0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);
 800102e:	2200      	movs	r2, #0
 8001030:	2120      	movs	r1, #32
 8001032:	480d      	ldr	r0, [pc, #52]	; (8001068 <main+0x160>)
 8001034:	f000 fd3c 	bl	8001ab0 <HAL_GPIO_WritePin>

		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13,GPIO_PIN_SET);
 8001038:	2201      	movs	r2, #1
 800103a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800103e:	480a      	ldr	r0, [pc, #40]	; (8001068 <main+0x160>)
 8001040:	f000 fd36 	bl	8001ab0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,GPIO_PIN_RESET);
 8001044:	2200      	movs	r2, #0
 8001046:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800104a:	4807      	ldr	r0, [pc, #28]	; (8001068 <main+0x160>)
 800104c:	f000 fd30 	bl	8001ab0 <HAL_GPIO_WritePin>
	  HCSR04_Read(); //Mesafeyi olcen sensor degerini olcmek icin fonksiyonu calistir
 8001050:	e77b      	b.n	8000f4a <main+0x42>
 8001052:	bf00      	nop
 8001054:	2000008c 	.word	0x2000008c
 8001058:	080036a0 	.word	0x080036a0
 800105c:	200000e2 	.word	0x200000e2
 8001060:	080036a8 	.word	0x080036a8
 8001064:	080036ac 	.word	0x080036ac
 8001068:	40010c00 	.word	0x40010c00

0800106c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b090      	sub	sp, #64	; 0x40
 8001070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001072:	f107 0318 	add.w	r3, r7, #24
 8001076:	2228      	movs	r2, #40	; 0x28
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f001 fe82 	bl	8002d84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
 800108c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800108e:	2301      	movs	r3, #1
 8001090:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001092:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001096:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001098:	2300      	movs	r3, #0
 800109a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800109c:	2301      	movs	r3, #1
 800109e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010a0:	2302      	movs	r3, #2
 80010a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010aa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80010ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b0:	f107 0318 	add.w	r3, r7, #24
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 fd13 	bl	8001ae0 <HAL_RCC_OscConfig>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80010c0:	f000 f8d2 	bl	8001268 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c4:	230f      	movs	r3, #15
 80010c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c8:	2302      	movs	r3, #2
 80010ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010cc:	2300      	movs	r3, #0
 80010ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	2102      	movs	r1, #2
 80010de:	4618      	mov	r0, r3
 80010e0:	f000 ff80 	bl	8001fe4 <HAL_RCC_ClockConfig>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <SystemClock_Config+0x82>
  {
    Error_Handler();
 80010ea:	f000 f8bd 	bl	8001268 <Error_Handler>
  }
}
 80010ee:	bf00      	nop
 80010f0:	3740      	adds	r7, #64	; 0x40
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010fe:	f107 0310 	add.w	r3, r7, #16
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001108:	463b      	mov	r3, r7
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]
 8001110:	609a      	str	r2, [r3, #8]
 8001112:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001114:	4b21      	ldr	r3, [pc, #132]	; (800119c <MX_TIM1_Init+0xa4>)
 8001116:	4a22      	ldr	r2, [pc, #136]	; (80011a0 <MX_TIM1_Init+0xa8>)
 8001118:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800111a:	4b20      	ldr	r3, [pc, #128]	; (800119c <MX_TIM1_Init+0xa4>)
 800111c:	2247      	movs	r2, #71	; 0x47
 800111e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001120:	4b1e      	ldr	r3, [pc, #120]	; (800119c <MX_TIM1_Init+0xa4>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001126:	4b1d      	ldr	r3, [pc, #116]	; (800119c <MX_TIM1_Init+0xa4>)
 8001128:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800112c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800112e:	4b1b      	ldr	r3, [pc, #108]	; (800119c <MX_TIM1_Init+0xa4>)
 8001130:	2200      	movs	r2, #0
 8001132:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001134:	4b19      	ldr	r3, [pc, #100]	; (800119c <MX_TIM1_Init+0xa4>)
 8001136:	2200      	movs	r2, #0
 8001138:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113a:	4b18      	ldr	r3, [pc, #96]	; (800119c <MX_TIM1_Init+0xa4>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001140:	4816      	ldr	r0, [pc, #88]	; (800119c <MX_TIM1_Init+0xa4>)
 8001142:	f001 f8b5 	bl	80022b0 <HAL_TIM_IC_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800114c:	f000 f88c 	bl	8001268 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001150:	2300      	movs	r3, #0
 8001152:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001158:	f107 0310 	add.w	r3, r7, #16
 800115c:	4619      	mov	r1, r3
 800115e:	480f      	ldr	r0, [pc, #60]	; (800119c <MX_TIM1_Init+0xa4>)
 8001160:	f001 fd7c 	bl	8002c5c <HAL_TIMEx_MasterConfigSynchronization>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800116a:	f000 f87d 	bl	8001268 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800116e:	2300      	movs	r3, #0
 8001170:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001172:	2301      	movs	r3, #1
 8001174:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800117e:	463b      	mov	r3, r7
 8001180:	2200      	movs	r2, #0
 8001182:	4619      	mov	r1, r3
 8001184:	4805      	ldr	r0, [pc, #20]	; (800119c <MX_TIM1_Init+0xa4>)
 8001186:	f001 fae9 	bl	800275c <HAL_TIM_IC_ConfigChannel>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001190:	f000 f86a 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001194:	bf00      	nop
 8001196:	3718      	adds	r7, #24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	2000008c 	.word	0x2000008c
 80011a0:	40012c00 	.word	0x40012c00

080011a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b088      	sub	sp, #32
 80011a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011aa:	f107 0310 	add.w	r3, r7, #16
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011b8:	4b28      	ldr	r3, [pc, #160]	; (800125c <MX_GPIO_Init+0xb8>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	4a27      	ldr	r2, [pc, #156]	; (800125c <MX_GPIO_Init+0xb8>)
 80011be:	f043 0320 	orr.w	r3, r3, #32
 80011c2:	6193      	str	r3, [r2, #24]
 80011c4:	4b25      	ldr	r3, [pc, #148]	; (800125c <MX_GPIO_Init+0xb8>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	f003 0320 	and.w	r3, r3, #32
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d0:	4b22      	ldr	r3, [pc, #136]	; (800125c <MX_GPIO_Init+0xb8>)
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	4a21      	ldr	r2, [pc, #132]	; (800125c <MX_GPIO_Init+0xb8>)
 80011d6:	f043 0304 	orr.w	r3, r3, #4
 80011da:	6193      	str	r3, [r2, #24]
 80011dc:	4b1f      	ldr	r3, [pc, #124]	; (800125c <MX_GPIO_Init+0xb8>)
 80011de:	699b      	ldr	r3, [r3, #24]
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e8:	4b1c      	ldr	r3, [pc, #112]	; (800125c <MX_GPIO_Init+0xb8>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	4a1b      	ldr	r2, [pc, #108]	; (800125c <MX_GPIO_Init+0xb8>)
 80011ee:	f043 0308 	orr.w	r3, r3, #8
 80011f2:	6193      	str	r3, [r2, #24]
 80011f4:	4b19      	ldr	r3, [pc, #100]	; (800125c <MX_GPIO_Init+0xb8>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	f003 0308 	and.w	r3, r3, #8
 80011fc:	607b      	str	r3, [r7, #4]
 80011fe:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_EN_Pin|LCD_RS_Pin|LCD_D4_Pin|LCD_D5_Pin
 8001200:	2200      	movs	r2, #0
 8001202:	f240 21f6 	movw	r1, #758	; 0x2f6
 8001206:	4816      	ldr	r0, [pc, #88]	; (8001260 <MX_GPIO_Init+0xbc>)
 8001208:	f000 fc52 	bl	8001ab0 <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LCD_D7_Pin|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DC_IN1_Pin|DC_IN2_Pin|GPIO_PIN_3|GPIO_PIN_4
 800120c:	2200      	movs	r2, #0
 800120e:	f246 0138 	movw	r1, #24632	; 0x6038
 8001212:	4814      	ldr	r0, [pc, #80]	; (8001264 <MX_GPIO_Init+0xc0>)
 8001214:	f000 fc4c 	bl	8001ab0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_EN_Pin LCD_RS_Pin LCD_D4_Pin LCD_D5_Pin
                           LCD_D6_Pin LCD_D7_Pin PA9 */
  GPIO_InitStruct.Pin = LCD_EN_Pin|LCD_RS_Pin|LCD_D4_Pin|LCD_D5_Pin
 8001218:	f240 23f6 	movw	r3, #758	; 0x2f6
 800121c:	613b      	str	r3, [r7, #16]
                          |LCD_D6_Pin|LCD_D7_Pin|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121e:	2301      	movs	r3, #1
 8001220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	2302      	movs	r3, #2
 8001228:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122a:	f107 0310 	add.w	r3, r7, #16
 800122e:	4619      	mov	r1, r3
 8001230:	480b      	ldr	r0, [pc, #44]	; (8001260 <MX_GPIO_Init+0xbc>)
 8001232:	f000 fac1 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DC_IN1_Pin DC_IN2_Pin PB3 PB4
                           PB5 */
  GPIO_InitStruct.Pin = DC_IN1_Pin|DC_IN2_Pin|GPIO_PIN_3|GPIO_PIN_4
 8001236:	f246 0338 	movw	r3, #24632	; 0x6038
 800123a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123c:	2301      	movs	r3, #1
 800123e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001244:	2302      	movs	r3, #2
 8001246:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001248:	f107 0310 	add.w	r3, r7, #16
 800124c:	4619      	mov	r1, r3
 800124e:	4805      	ldr	r0, [pc, #20]	; (8001264 <MX_GPIO_Init+0xc0>)
 8001250:	f000 fab2 	bl	80017b8 <HAL_GPIO_Init>

}
 8001254:	bf00      	nop
 8001256:	3720      	adds	r7, #32
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40021000 	.word	0x40021000
 8001260:	40010800 	.word	0x40010800
 8001264:	40010c00 	.word	0x40010c00

08001268 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800126c:	b672      	cpsid	i
}
 800126e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001270:	e7fe      	b.n	8001270 <Error_Handler+0x8>
	...

08001274 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <HAL_MspInit+0x5c>)
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	4a14      	ldr	r2, [pc, #80]	; (80012d0 <HAL_MspInit+0x5c>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6193      	str	r3, [r2, #24]
 8001286:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_MspInit+0x5c>)
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001292:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <HAL_MspInit+0x5c>)
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	4a0e      	ldr	r2, [pc, #56]	; (80012d0 <HAL_MspInit+0x5c>)
 8001298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800129c:	61d3      	str	r3, [r2, #28]
 800129e:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <HAL_MspInit+0x5c>)
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012aa:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <HAL_MspInit+0x60>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	4a04      	ldr	r2, [pc, #16]	; (80012d4 <HAL_MspInit+0x60>)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c6:	bf00      	nop
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40010000 	.word	0x40010000

080012d8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 0310 	add.w	r3, r7, #16
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM1)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a1a      	ldr	r2, [pc, #104]	; (800135c <HAL_TIM_IC_MspInit+0x84>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d12c      	bne.n	8001352 <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012f8:	4b19      	ldr	r3, [pc, #100]	; (8001360 <HAL_TIM_IC_MspInit+0x88>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	4a18      	ldr	r2, [pc, #96]	; (8001360 <HAL_TIM_IC_MspInit+0x88>)
 80012fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001302:	6193      	str	r3, [r2, #24]
 8001304:	4b16      	ldr	r3, [pc, #88]	; (8001360 <HAL_TIM_IC_MspInit+0x88>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001310:	4b13      	ldr	r3, [pc, #76]	; (8001360 <HAL_TIM_IC_MspInit+0x88>)
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	4a12      	ldr	r2, [pc, #72]	; (8001360 <HAL_TIM_IC_MspInit+0x88>)
 8001316:	f043 0304 	orr.w	r3, r3, #4
 800131a:	6193      	str	r3, [r2, #24]
 800131c:	4b10      	ldr	r3, [pc, #64]	; (8001360 <HAL_TIM_IC_MspInit+0x88>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001328:	f44f 7380 	mov.w	r3, #256	; 0x100
 800132c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001336:	f107 0310 	add.w	r3, r7, #16
 800133a:	4619      	mov	r1, r3
 800133c:	4809      	ldr	r0, [pc, #36]	; (8001364 <HAL_TIM_IC_MspInit+0x8c>)
 800133e:	f000 fa3b 	bl	80017b8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001342:	2200      	movs	r2, #0
 8001344:	2100      	movs	r1, #0
 8001346:	201b      	movs	r0, #27
 8001348:	f000 f9ff 	bl	800174a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800134c:	201b      	movs	r0, #27
 800134e:	f000 fa18 	bl	8001782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001352:	bf00      	nop
 8001354:	3720      	adds	r7, #32
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40012c00 	.word	0x40012c00
 8001360:	40021000 	.word	0x40021000
 8001364:	40010800 	.word	0x40010800

08001368 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800136c:	e7fe      	b.n	800136c <NMI_Handler+0x4>

0800136e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001372:	e7fe      	b.n	8001372 <HardFault_Handler+0x4>

08001374 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001378:	e7fe      	b.n	8001378 <MemManage_Handler+0x4>

0800137a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800137e:	e7fe      	b.n	800137e <BusFault_Handler+0x4>

08001380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001384:	e7fe      	b.n	8001384 <UsageFault_Handler+0x4>

08001386 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	bc80      	pop	{r7}
 8001390:	4770      	bx	lr

08001392 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	46bd      	mov	sp, r7
 800139a:	bc80      	pop	{r7}
 800139c:	4770      	bx	lr

0800139e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr

080013aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ae:	f000 f8b5 	bl	800151c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
	...

080013b8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013bc:	4802      	ldr	r0, [pc, #8]	; (80013c8 <TIM1_CC_IRQHandler+0x10>)
 80013be:	f001 f8c5 	bl	800254c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	2000008c 	.word	0x2000008c

080013cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013d4:	4a14      	ldr	r2, [pc, #80]	; (8001428 <_sbrk+0x5c>)
 80013d6:	4b15      	ldr	r3, [pc, #84]	; (800142c <_sbrk+0x60>)
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013e0:	4b13      	ldr	r3, [pc, #76]	; (8001430 <_sbrk+0x64>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d102      	bne.n	80013ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <_sbrk+0x64>)
 80013ea:	4a12      	ldr	r2, [pc, #72]	; (8001434 <_sbrk+0x68>)
 80013ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ee:	4b10      	ldr	r3, [pc, #64]	; (8001430 <_sbrk+0x64>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4413      	add	r3, r2
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d207      	bcs.n	800140c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013fc:	f001 fc98 	bl	8002d30 <__errno>
 8001400:	4603      	mov	r3, r0
 8001402:	220c      	movs	r2, #12
 8001404:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001406:	f04f 33ff 	mov.w	r3, #4294967295
 800140a:	e009      	b.n	8001420 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800140c:	4b08      	ldr	r3, [pc, #32]	; (8001430 <_sbrk+0x64>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001412:	4b07      	ldr	r3, [pc, #28]	; (8001430 <_sbrk+0x64>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4413      	add	r3, r2
 800141a:	4a05      	ldr	r2, [pc, #20]	; (8001430 <_sbrk+0x64>)
 800141c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800141e:	68fb      	ldr	r3, [r7, #12]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20001800 	.word	0x20001800
 800142c:	00000400 	.word	0x00000400
 8001430:	200000e4 	.word	0x200000e4
 8001434:	20000100 	.word	0x20000100

08001438 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr

08001444 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001444:	480c      	ldr	r0, [pc, #48]	; (8001478 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001446:	490d      	ldr	r1, [pc, #52]	; (800147c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001448:	4a0d      	ldr	r2, [pc, #52]	; (8001480 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800144a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800144c:	e002      	b.n	8001454 <LoopCopyDataInit>

0800144e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800144e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001452:	3304      	adds	r3, #4

08001454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001458:	d3f9      	bcc.n	800144e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800145a:	4a0a      	ldr	r2, [pc, #40]	; (8001484 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800145c:	4c0a      	ldr	r4, [pc, #40]	; (8001488 <LoopFillZerobss+0x22>)
  movs r3, #0
 800145e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001460:	e001      	b.n	8001466 <LoopFillZerobss>

08001462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001464:	3204      	adds	r2, #4

08001466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001468:	d3fb      	bcc.n	8001462 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800146a:	f7ff ffe5 	bl	8001438 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800146e:	f001 fc65 	bl	8002d3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001472:	f7ff fd49 	bl	8000f08 <main>
  bx lr
 8001476:	4770      	bx	lr
  ldr r0, =_sdata
 8001478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800147c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001480:	0800370c 	.word	0x0800370c
  ldr r2, =_sbss
 8001484:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001488:	200000fc 	.word	0x200000fc

0800148c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800148c:	e7fe      	b.n	800148c <ADC1_2_IRQHandler>
	...

08001490 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001494:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <HAL_Init+0x28>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a07      	ldr	r2, [pc, #28]	; (80014b8 <HAL_Init+0x28>)
 800149a:	f043 0310 	orr.w	r3, r3, #16
 800149e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a0:	2003      	movs	r0, #3
 80014a2:	f000 f947 	bl	8001734 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014a6:	200f      	movs	r0, #15
 80014a8:	f000 f808 	bl	80014bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014ac:	f7ff fee2 	bl	8001274 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40022000 	.word	0x40022000

080014bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014c4:	4b12      	ldr	r3, [pc, #72]	; (8001510 <HAL_InitTick+0x54>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	4b12      	ldr	r3, [pc, #72]	; (8001514 <HAL_InitTick+0x58>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	4619      	mov	r1, r3
 80014ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014da:	4618      	mov	r0, r3
 80014dc:	f000 f95f 	bl	800179e <HAL_SYSTICK_Config>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e00e      	b.n	8001508 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2b0f      	cmp	r3, #15
 80014ee:	d80a      	bhi.n	8001506 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f0:	2200      	movs	r2, #0
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	f04f 30ff 	mov.w	r0, #4294967295
 80014f8:	f000 f927 	bl	800174a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014fc:	4a06      	ldr	r2, [pc, #24]	; (8001518 <HAL_InitTick+0x5c>)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001502:	2300      	movs	r3, #0
 8001504:	e000      	b.n	8001508 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
}
 8001508:	4618      	mov	r0, r3
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000000 	.word	0x20000000
 8001514:	20000008 	.word	0x20000008
 8001518:	20000004 	.word	0x20000004

0800151c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001520:	4b05      	ldr	r3, [pc, #20]	; (8001538 <HAL_IncTick+0x1c>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	461a      	mov	r2, r3
 8001526:	4b05      	ldr	r3, [pc, #20]	; (800153c <HAL_IncTick+0x20>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4413      	add	r3, r2
 800152c:	4a03      	ldr	r2, [pc, #12]	; (800153c <HAL_IncTick+0x20>)
 800152e:	6013      	str	r3, [r2, #0]
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	20000008 	.word	0x20000008
 800153c:	200000e8 	.word	0x200000e8

08001540 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return uwTick;
 8001544:	4b02      	ldr	r3, [pc, #8]	; (8001550 <HAL_GetTick+0x10>)
 8001546:	681b      	ldr	r3, [r3, #0]
}
 8001548:	4618      	mov	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr
 8001550:	200000e8 	.word	0x200000e8

08001554 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800155c:	f7ff fff0 	bl	8001540 <HAL_GetTick>
 8001560:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800156c:	d005      	beq.n	800157a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800156e:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <HAL_Delay+0x44>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	461a      	mov	r2, r3
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4413      	add	r3, r2
 8001578:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800157a:	bf00      	nop
 800157c:	f7ff ffe0 	bl	8001540 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	429a      	cmp	r2, r3
 800158a:	d8f7      	bhi.n	800157c <HAL_Delay+0x28>
  {
  }
}
 800158c:	bf00      	nop
 800158e:	bf00      	nop
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000008 	.word	0x20000008

0800159c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <__NVIC_SetPriorityGrouping+0x44>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015b2:	68ba      	ldr	r2, [r7, #8]
 80015b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015b8:	4013      	ands	r3, r2
 80015ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ce:	4a04      	ldr	r2, [pc, #16]	; (80015e0 <__NVIC_SetPriorityGrouping+0x44>)
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	60d3      	str	r3, [r2, #12]
}
 80015d4:	bf00      	nop
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e8:	4b04      	ldr	r3, [pc, #16]	; (80015fc <__NVIC_GetPriorityGrouping+0x18>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	0a1b      	lsrs	r3, r3, #8
 80015ee:	f003 0307 	and.w	r3, r3, #7
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800160a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160e:	2b00      	cmp	r3, #0
 8001610:	db0b      	blt.n	800162a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	f003 021f 	and.w	r2, r3, #31
 8001618:	4906      	ldr	r1, [pc, #24]	; (8001634 <__NVIC_EnableIRQ+0x34>)
 800161a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161e:	095b      	lsrs	r3, r3, #5
 8001620:	2001      	movs	r0, #1
 8001622:	fa00 f202 	lsl.w	r2, r0, r2
 8001626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr
 8001634:	e000e100 	.word	0xe000e100

08001638 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	6039      	str	r1, [r7, #0]
 8001642:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001648:	2b00      	cmp	r3, #0
 800164a:	db0a      	blt.n	8001662 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	b2da      	uxtb	r2, r3
 8001650:	490c      	ldr	r1, [pc, #48]	; (8001684 <__NVIC_SetPriority+0x4c>)
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	0112      	lsls	r2, r2, #4
 8001658:	b2d2      	uxtb	r2, r2
 800165a:	440b      	add	r3, r1
 800165c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001660:	e00a      	b.n	8001678 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	b2da      	uxtb	r2, r3
 8001666:	4908      	ldr	r1, [pc, #32]	; (8001688 <__NVIC_SetPriority+0x50>)
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	f003 030f 	and.w	r3, r3, #15
 800166e:	3b04      	subs	r3, #4
 8001670:	0112      	lsls	r2, r2, #4
 8001672:	b2d2      	uxtb	r2, r2
 8001674:	440b      	add	r3, r1
 8001676:	761a      	strb	r2, [r3, #24]
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000e100 	.word	0xe000e100
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800168c:	b480      	push	{r7}
 800168e:	b089      	sub	sp, #36	; 0x24
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	f1c3 0307 	rsb	r3, r3, #7
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	bf28      	it	cs
 80016aa:	2304      	movcs	r3, #4
 80016ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3304      	adds	r3, #4
 80016b2:	2b06      	cmp	r3, #6
 80016b4:	d902      	bls.n	80016bc <NVIC_EncodePriority+0x30>
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3b03      	subs	r3, #3
 80016ba:	e000      	b.n	80016be <NVIC_EncodePriority+0x32>
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c0:	f04f 32ff 	mov.w	r2, #4294967295
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43da      	mvns	r2, r3
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	401a      	ands	r2, r3
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d4:	f04f 31ff 	mov.w	r1, #4294967295
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	fa01 f303 	lsl.w	r3, r1, r3
 80016de:	43d9      	mvns	r1, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e4:	4313      	orrs	r3, r2
         );
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3724      	adds	r7, #36	; 0x24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr

080016f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001700:	d301      	bcc.n	8001706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001702:	2301      	movs	r3, #1
 8001704:	e00f      	b.n	8001726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001706:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <SysTick_Config+0x40>)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3b01      	subs	r3, #1
 800170c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800170e:	210f      	movs	r1, #15
 8001710:	f04f 30ff 	mov.w	r0, #4294967295
 8001714:	f7ff ff90 	bl	8001638 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001718:	4b05      	ldr	r3, [pc, #20]	; (8001730 <SysTick_Config+0x40>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171e:	4b04      	ldr	r3, [pc, #16]	; (8001730 <SysTick_Config+0x40>)
 8001720:	2207      	movs	r2, #7
 8001722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	e000e010 	.word	0xe000e010

08001734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff ff2d 	bl	800159c <__NVIC_SetPriorityGrouping>
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800174a:	b580      	push	{r7, lr}
 800174c:	b086      	sub	sp, #24
 800174e:	af00      	add	r7, sp, #0
 8001750:	4603      	mov	r3, r0
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	607a      	str	r2, [r7, #4]
 8001756:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800175c:	f7ff ff42 	bl	80015e4 <__NVIC_GetPriorityGrouping>
 8001760:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	68b9      	ldr	r1, [r7, #8]
 8001766:	6978      	ldr	r0, [r7, #20]
 8001768:	f7ff ff90 	bl	800168c <NVIC_EncodePriority>
 800176c:	4602      	mov	r2, r0
 800176e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001772:	4611      	mov	r1, r2
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ff5f 	bl	8001638 <__NVIC_SetPriority>
}
 800177a:	bf00      	nop
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	4603      	mov	r3, r0
 800178a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800178c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff ff35 	bl	8001600 <__NVIC_EnableIRQ>
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff ffa2 	bl	80016f0 <SysTick_Config>
 80017ac:	4603      	mov	r3, r0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b08b      	sub	sp, #44	; 0x2c
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017c2:	2300      	movs	r3, #0
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017c6:	2300      	movs	r3, #0
 80017c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ca:	e161      	b.n	8001a90 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017cc:	2201      	movs	r2, #1
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	69fa      	ldr	r2, [r7, #28]
 80017dc:	4013      	ands	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	f040 8150 	bne.w	8001a8a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	4a97      	ldr	r2, [pc, #604]	; (8001a4c <HAL_GPIO_Init+0x294>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d05e      	beq.n	80018b2 <HAL_GPIO_Init+0xfa>
 80017f4:	4a95      	ldr	r2, [pc, #596]	; (8001a4c <HAL_GPIO_Init+0x294>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d875      	bhi.n	80018e6 <HAL_GPIO_Init+0x12e>
 80017fa:	4a95      	ldr	r2, [pc, #596]	; (8001a50 <HAL_GPIO_Init+0x298>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d058      	beq.n	80018b2 <HAL_GPIO_Init+0xfa>
 8001800:	4a93      	ldr	r2, [pc, #588]	; (8001a50 <HAL_GPIO_Init+0x298>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d86f      	bhi.n	80018e6 <HAL_GPIO_Init+0x12e>
 8001806:	4a93      	ldr	r2, [pc, #588]	; (8001a54 <HAL_GPIO_Init+0x29c>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d052      	beq.n	80018b2 <HAL_GPIO_Init+0xfa>
 800180c:	4a91      	ldr	r2, [pc, #580]	; (8001a54 <HAL_GPIO_Init+0x29c>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d869      	bhi.n	80018e6 <HAL_GPIO_Init+0x12e>
 8001812:	4a91      	ldr	r2, [pc, #580]	; (8001a58 <HAL_GPIO_Init+0x2a0>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d04c      	beq.n	80018b2 <HAL_GPIO_Init+0xfa>
 8001818:	4a8f      	ldr	r2, [pc, #572]	; (8001a58 <HAL_GPIO_Init+0x2a0>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d863      	bhi.n	80018e6 <HAL_GPIO_Init+0x12e>
 800181e:	4a8f      	ldr	r2, [pc, #572]	; (8001a5c <HAL_GPIO_Init+0x2a4>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d046      	beq.n	80018b2 <HAL_GPIO_Init+0xfa>
 8001824:	4a8d      	ldr	r2, [pc, #564]	; (8001a5c <HAL_GPIO_Init+0x2a4>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d85d      	bhi.n	80018e6 <HAL_GPIO_Init+0x12e>
 800182a:	2b12      	cmp	r3, #18
 800182c:	d82a      	bhi.n	8001884 <HAL_GPIO_Init+0xcc>
 800182e:	2b12      	cmp	r3, #18
 8001830:	d859      	bhi.n	80018e6 <HAL_GPIO_Init+0x12e>
 8001832:	a201      	add	r2, pc, #4	; (adr r2, 8001838 <HAL_GPIO_Init+0x80>)
 8001834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001838:	080018b3 	.word	0x080018b3
 800183c:	0800188d 	.word	0x0800188d
 8001840:	0800189f 	.word	0x0800189f
 8001844:	080018e1 	.word	0x080018e1
 8001848:	080018e7 	.word	0x080018e7
 800184c:	080018e7 	.word	0x080018e7
 8001850:	080018e7 	.word	0x080018e7
 8001854:	080018e7 	.word	0x080018e7
 8001858:	080018e7 	.word	0x080018e7
 800185c:	080018e7 	.word	0x080018e7
 8001860:	080018e7 	.word	0x080018e7
 8001864:	080018e7 	.word	0x080018e7
 8001868:	080018e7 	.word	0x080018e7
 800186c:	080018e7 	.word	0x080018e7
 8001870:	080018e7 	.word	0x080018e7
 8001874:	080018e7 	.word	0x080018e7
 8001878:	080018e7 	.word	0x080018e7
 800187c:	08001895 	.word	0x08001895
 8001880:	080018a9 	.word	0x080018a9
 8001884:	4a76      	ldr	r2, [pc, #472]	; (8001a60 <HAL_GPIO_Init+0x2a8>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d013      	beq.n	80018b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800188a:	e02c      	b.n	80018e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	623b      	str	r3, [r7, #32]
          break;
 8001892:	e029      	b.n	80018e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	3304      	adds	r3, #4
 800189a:	623b      	str	r3, [r7, #32]
          break;
 800189c:	e024      	b.n	80018e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	3308      	adds	r3, #8
 80018a4:	623b      	str	r3, [r7, #32]
          break;
 80018a6:	e01f      	b.n	80018e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	330c      	adds	r3, #12
 80018ae:	623b      	str	r3, [r7, #32]
          break;
 80018b0:	e01a      	b.n	80018e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d102      	bne.n	80018c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018ba:	2304      	movs	r3, #4
 80018bc:	623b      	str	r3, [r7, #32]
          break;
 80018be:	e013      	b.n	80018e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d105      	bne.n	80018d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018c8:	2308      	movs	r3, #8
 80018ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	69fa      	ldr	r2, [r7, #28]
 80018d0:	611a      	str	r2, [r3, #16]
          break;
 80018d2:	e009      	b.n	80018e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018d4:	2308      	movs	r3, #8
 80018d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	69fa      	ldr	r2, [r7, #28]
 80018dc:	615a      	str	r2, [r3, #20]
          break;
 80018de:	e003      	b.n	80018e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018e0:	2300      	movs	r3, #0
 80018e2:	623b      	str	r3, [r7, #32]
          break;
 80018e4:	e000      	b.n	80018e8 <HAL_GPIO_Init+0x130>
          break;
 80018e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	2bff      	cmp	r3, #255	; 0xff
 80018ec:	d801      	bhi.n	80018f2 <HAL_GPIO_Init+0x13a>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	e001      	b.n	80018f6 <HAL_GPIO_Init+0x13e>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	3304      	adds	r3, #4
 80018f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	2bff      	cmp	r3, #255	; 0xff
 80018fc:	d802      	bhi.n	8001904 <HAL_GPIO_Init+0x14c>
 80018fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	e002      	b.n	800190a <HAL_GPIO_Init+0x152>
 8001904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001906:	3b08      	subs	r3, #8
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	210f      	movs	r1, #15
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	fa01 f303 	lsl.w	r3, r1, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	401a      	ands	r2, r3
 800191c:	6a39      	ldr	r1, [r7, #32]
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	fa01 f303 	lsl.w	r3, r1, r3
 8001924:	431a      	orrs	r2, r3
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	f000 80a9 	beq.w	8001a8a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001938:	4b4a      	ldr	r3, [pc, #296]	; (8001a64 <HAL_GPIO_Init+0x2ac>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	4a49      	ldr	r2, [pc, #292]	; (8001a64 <HAL_GPIO_Init+0x2ac>)
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	6193      	str	r3, [r2, #24]
 8001944:	4b47      	ldr	r3, [pc, #284]	; (8001a64 <HAL_GPIO_Init+0x2ac>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001950:	4a45      	ldr	r2, [pc, #276]	; (8001a68 <HAL_GPIO_Init+0x2b0>)
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	089b      	lsrs	r3, r3, #2
 8001956:	3302      	adds	r3, #2
 8001958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	f003 0303 	and.w	r3, r3, #3
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	220f      	movs	r2, #15
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	4013      	ands	r3, r2
 8001972:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a3d      	ldr	r2, [pc, #244]	; (8001a6c <HAL_GPIO_Init+0x2b4>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d00d      	beq.n	8001998 <HAL_GPIO_Init+0x1e0>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a3c      	ldr	r2, [pc, #240]	; (8001a70 <HAL_GPIO_Init+0x2b8>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d007      	beq.n	8001994 <HAL_GPIO_Init+0x1dc>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	4a3b      	ldr	r2, [pc, #236]	; (8001a74 <HAL_GPIO_Init+0x2bc>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d101      	bne.n	8001990 <HAL_GPIO_Init+0x1d8>
 800198c:	2302      	movs	r3, #2
 800198e:	e004      	b.n	800199a <HAL_GPIO_Init+0x1e2>
 8001990:	2303      	movs	r3, #3
 8001992:	e002      	b.n	800199a <HAL_GPIO_Init+0x1e2>
 8001994:	2301      	movs	r3, #1
 8001996:	e000      	b.n	800199a <HAL_GPIO_Init+0x1e2>
 8001998:	2300      	movs	r3, #0
 800199a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800199c:	f002 0203 	and.w	r2, r2, #3
 80019a0:	0092      	lsls	r2, r2, #2
 80019a2:	4093      	lsls	r3, r2
 80019a4:	68fa      	ldr	r2, [r7, #12]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019aa:	492f      	ldr	r1, [pc, #188]	; (8001a68 <HAL_GPIO_Init+0x2b0>)
 80019ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ae:	089b      	lsrs	r3, r3, #2
 80019b0:	3302      	adds	r3, #2
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d006      	beq.n	80019d2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019c4:	4b2c      	ldr	r3, [pc, #176]	; (8001a78 <HAL_GPIO_Init+0x2c0>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	492b      	ldr	r1, [pc, #172]	; (8001a78 <HAL_GPIO_Init+0x2c0>)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	600b      	str	r3, [r1, #0]
 80019d0:	e006      	b.n	80019e0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019d2:	4b29      	ldr	r3, [pc, #164]	; (8001a78 <HAL_GPIO_Init+0x2c0>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	43db      	mvns	r3, r3
 80019da:	4927      	ldr	r1, [pc, #156]	; (8001a78 <HAL_GPIO_Init+0x2c0>)
 80019dc:	4013      	ands	r3, r2
 80019de:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d006      	beq.n	80019fa <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019ec:	4b22      	ldr	r3, [pc, #136]	; (8001a78 <HAL_GPIO_Init+0x2c0>)
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	4921      	ldr	r1, [pc, #132]	; (8001a78 <HAL_GPIO_Init+0x2c0>)
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	604b      	str	r3, [r1, #4]
 80019f8:	e006      	b.n	8001a08 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019fa:	4b1f      	ldr	r3, [pc, #124]	; (8001a78 <HAL_GPIO_Init+0x2c0>)
 80019fc:	685a      	ldr	r2, [r3, #4]
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	43db      	mvns	r3, r3
 8001a02:	491d      	ldr	r1, [pc, #116]	; (8001a78 <HAL_GPIO_Init+0x2c0>)
 8001a04:	4013      	ands	r3, r2
 8001a06:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d006      	beq.n	8001a22 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a14:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <HAL_GPIO_Init+0x2c0>)
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	4917      	ldr	r1, [pc, #92]	; (8001a78 <HAL_GPIO_Init+0x2c0>)
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	608b      	str	r3, [r1, #8]
 8001a20:	e006      	b.n	8001a30 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a22:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <HAL_GPIO_Init+0x2c0>)
 8001a24:	689a      	ldr	r2, [r3, #8]
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	4913      	ldr	r1, [pc, #76]	; (8001a78 <HAL_GPIO_Init+0x2c0>)
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d01f      	beq.n	8001a7c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a3c:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <HAL_GPIO_Init+0x2c0>)
 8001a3e:	68da      	ldr	r2, [r3, #12]
 8001a40:	490d      	ldr	r1, [pc, #52]	; (8001a78 <HAL_GPIO_Init+0x2c0>)
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	60cb      	str	r3, [r1, #12]
 8001a48:	e01f      	b.n	8001a8a <HAL_GPIO_Init+0x2d2>
 8001a4a:	bf00      	nop
 8001a4c:	10320000 	.word	0x10320000
 8001a50:	10310000 	.word	0x10310000
 8001a54:	10220000 	.word	0x10220000
 8001a58:	10210000 	.word	0x10210000
 8001a5c:	10120000 	.word	0x10120000
 8001a60:	10110000 	.word	0x10110000
 8001a64:	40021000 	.word	0x40021000
 8001a68:	40010000 	.word	0x40010000
 8001a6c:	40010800 	.word	0x40010800
 8001a70:	40010c00 	.word	0x40010c00
 8001a74:	40011000 	.word	0x40011000
 8001a78:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <HAL_GPIO_Init+0x2f4>)
 8001a7e:	68da      	ldr	r2, [r3, #12]
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	43db      	mvns	r3, r3
 8001a84:	4909      	ldr	r1, [pc, #36]	; (8001aac <HAL_GPIO_Init+0x2f4>)
 8001a86:	4013      	ands	r3, r2
 8001a88:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a96:	fa22 f303 	lsr.w	r3, r2, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f47f ae96 	bne.w	80017cc <HAL_GPIO_Init+0x14>
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	bf00      	nop
 8001aa4:	372c      	adds	r7, #44	; 0x2c
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr
 8001aac:	40010400 	.word	0x40010400

08001ab0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	807b      	strh	r3, [r7, #2]
 8001abc:	4613      	mov	r3, r2
 8001abe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ac0:	787b      	ldrb	r3, [r7, #1]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ac6:	887a      	ldrh	r2, [r7, #2]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001acc:	e003      	b.n	8001ad6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ace:	887b      	ldrh	r3, [r7, #2]
 8001ad0:	041a      	lsls	r2, r3, #16
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	611a      	str	r2, [r3, #16]
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc80      	pop	{r7}
 8001ade:	4770      	bx	lr

08001ae0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e272      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 8087 	beq.w	8001c0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b00:	4b92      	ldr	r3, [pc, #584]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 030c 	and.w	r3, r3, #12
 8001b08:	2b04      	cmp	r3, #4
 8001b0a:	d00c      	beq.n	8001b26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b0c:	4b8f      	ldr	r3, [pc, #572]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 030c 	and.w	r3, r3, #12
 8001b14:	2b08      	cmp	r3, #8
 8001b16:	d112      	bne.n	8001b3e <HAL_RCC_OscConfig+0x5e>
 8001b18:	4b8c      	ldr	r3, [pc, #560]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b24:	d10b      	bne.n	8001b3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b26:	4b89      	ldr	r3, [pc, #548]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d06c      	beq.n	8001c0c <HAL_RCC_OscConfig+0x12c>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d168      	bne.n	8001c0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e24c      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b46:	d106      	bne.n	8001b56 <HAL_RCC_OscConfig+0x76>
 8001b48:	4b80      	ldr	r3, [pc, #512]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a7f      	ldr	r2, [pc, #508]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b52:	6013      	str	r3, [r2, #0]
 8001b54:	e02e      	b.n	8001bb4 <HAL_RCC_OscConfig+0xd4>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d10c      	bne.n	8001b78 <HAL_RCC_OscConfig+0x98>
 8001b5e:	4b7b      	ldr	r3, [pc, #492]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a7a      	ldr	r2, [pc, #488]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	4b78      	ldr	r3, [pc, #480]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a77      	ldr	r2, [pc, #476]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	e01d      	b.n	8001bb4 <HAL_RCC_OscConfig+0xd4>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b80:	d10c      	bne.n	8001b9c <HAL_RCC_OscConfig+0xbc>
 8001b82:	4b72      	ldr	r3, [pc, #456]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a71      	ldr	r2, [pc, #452]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	4b6f      	ldr	r3, [pc, #444]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a6e      	ldr	r2, [pc, #440]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	e00b      	b.n	8001bb4 <HAL_RCC_OscConfig+0xd4>
 8001b9c:	4b6b      	ldr	r3, [pc, #428]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a6a      	ldr	r2, [pc, #424]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ba6:	6013      	str	r3, [r2, #0]
 8001ba8:	4b68      	ldr	r3, [pc, #416]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a67      	ldr	r2, [pc, #412]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001bae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bb2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d013      	beq.n	8001be4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbc:	f7ff fcc0 	bl	8001540 <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc4:	f7ff fcbc 	bl	8001540 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b64      	cmp	r3, #100	; 0x64
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e200      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd6:	4b5d      	ldr	r3, [pc, #372]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0f0      	beq.n	8001bc4 <HAL_RCC_OscConfig+0xe4>
 8001be2:	e014      	b.n	8001c0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be4:	f7ff fcac 	bl	8001540 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bec:	f7ff fca8 	bl	8001540 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b64      	cmp	r3, #100	; 0x64
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e1ec      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bfe:	4b53      	ldr	r3, [pc, #332]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f0      	bne.n	8001bec <HAL_RCC_OscConfig+0x10c>
 8001c0a:	e000      	b.n	8001c0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d063      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c1a:	4b4c      	ldr	r3, [pc, #304]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f003 030c 	and.w	r3, r3, #12
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d00b      	beq.n	8001c3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c26:	4b49      	ldr	r3, [pc, #292]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
 8001c2e:	2b08      	cmp	r3, #8
 8001c30:	d11c      	bne.n	8001c6c <HAL_RCC_OscConfig+0x18c>
 8001c32:	4b46      	ldr	r3, [pc, #280]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d116      	bne.n	8001c6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c3e:	4b43      	ldr	r3, [pc, #268]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d005      	beq.n	8001c56 <HAL_RCC_OscConfig+0x176>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d001      	beq.n	8001c56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e1c0      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c56:	4b3d      	ldr	r3, [pc, #244]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	4939      	ldr	r1, [pc, #228]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c6a:	e03a      	b.n	8001ce2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d020      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c74:	4b36      	ldr	r3, [pc, #216]	; (8001d50 <HAL_RCC_OscConfig+0x270>)
 8001c76:	2201      	movs	r2, #1
 8001c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7a:	f7ff fc61 	bl	8001540 <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c82:	f7ff fc5d 	bl	8001540 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e1a1      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c94:	4b2d      	ldr	r3, [pc, #180]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0f0      	beq.n	8001c82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca0:	4b2a      	ldr	r3, [pc, #168]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	695b      	ldr	r3, [r3, #20]
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	4927      	ldr	r1, [pc, #156]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	600b      	str	r3, [r1, #0]
 8001cb4:	e015      	b.n	8001ce2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cb6:	4b26      	ldr	r3, [pc, #152]	; (8001d50 <HAL_RCC_OscConfig+0x270>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbc:	f7ff fc40 	bl	8001540 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc4:	f7ff fc3c 	bl	8001540 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e180      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cd6:	4b1d      	ldr	r3, [pc, #116]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f0      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d03a      	beq.n	8001d64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d019      	beq.n	8001d2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cf6:	4b17      	ldr	r3, [pc, #92]	; (8001d54 <HAL_RCC_OscConfig+0x274>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cfc:	f7ff fc20 	bl	8001540 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d04:	f7ff fc1c 	bl	8001540 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e160      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d16:	4b0d      	ldr	r3, [pc, #52]	; (8001d4c <HAL_RCC_OscConfig+0x26c>)
 8001d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0f0      	beq.n	8001d04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d22:	2001      	movs	r0, #1
 8001d24:	f000 faa6 	bl	8002274 <RCC_Delay>
 8001d28:	e01c      	b.n	8001d64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d2a:	4b0a      	ldr	r3, [pc, #40]	; (8001d54 <HAL_RCC_OscConfig+0x274>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d30:	f7ff fc06 	bl	8001540 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d36:	e00f      	b.n	8001d58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d38:	f7ff fc02 	bl	8001540 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d908      	bls.n	8001d58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e146      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4f8>
 8001d4a:	bf00      	nop
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	42420000 	.word	0x42420000
 8001d54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d58:	4b92      	ldr	r3, [pc, #584]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1e9      	bne.n	8001d38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f000 80a6 	beq.w	8001ebe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d72:	2300      	movs	r3, #0
 8001d74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d76:	4b8b      	ldr	r3, [pc, #556]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10d      	bne.n	8001d9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d82:	4b88      	ldr	r3, [pc, #544]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	4a87      	ldr	r2, [pc, #540]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d8c:	61d3      	str	r3, [r2, #28]
 8001d8e:	4b85      	ldr	r3, [pc, #532]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d96:	60bb      	str	r3, [r7, #8]
 8001d98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d9e:	4b82      	ldr	r3, [pc, #520]	; (8001fa8 <HAL_RCC_OscConfig+0x4c8>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d118      	bne.n	8001ddc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001daa:	4b7f      	ldr	r3, [pc, #508]	; (8001fa8 <HAL_RCC_OscConfig+0x4c8>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a7e      	ldr	r2, [pc, #504]	; (8001fa8 <HAL_RCC_OscConfig+0x4c8>)
 8001db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001db6:	f7ff fbc3 	bl	8001540 <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dbe:	f7ff fbbf 	bl	8001540 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b64      	cmp	r3, #100	; 0x64
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e103      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd0:	4b75      	ldr	r3, [pc, #468]	; (8001fa8 <HAL_RCC_OscConfig+0x4c8>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0f0      	beq.n	8001dbe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d106      	bne.n	8001df2 <HAL_RCC_OscConfig+0x312>
 8001de4:	4b6f      	ldr	r3, [pc, #444]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	4a6e      	ldr	r2, [pc, #440]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	6213      	str	r3, [r2, #32]
 8001df0:	e02d      	b.n	8001e4e <HAL_RCC_OscConfig+0x36e>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10c      	bne.n	8001e14 <HAL_RCC_OscConfig+0x334>
 8001dfa:	4b6a      	ldr	r3, [pc, #424]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	4a69      	ldr	r2, [pc, #420]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001e00:	f023 0301 	bic.w	r3, r3, #1
 8001e04:	6213      	str	r3, [r2, #32]
 8001e06:	4b67      	ldr	r3, [pc, #412]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001e08:	6a1b      	ldr	r3, [r3, #32]
 8001e0a:	4a66      	ldr	r2, [pc, #408]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001e0c:	f023 0304 	bic.w	r3, r3, #4
 8001e10:	6213      	str	r3, [r2, #32]
 8001e12:	e01c      	b.n	8001e4e <HAL_RCC_OscConfig+0x36e>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	2b05      	cmp	r3, #5
 8001e1a:	d10c      	bne.n	8001e36 <HAL_RCC_OscConfig+0x356>
 8001e1c:	4b61      	ldr	r3, [pc, #388]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	4a60      	ldr	r2, [pc, #384]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001e22:	f043 0304 	orr.w	r3, r3, #4
 8001e26:	6213      	str	r3, [r2, #32]
 8001e28:	4b5e      	ldr	r3, [pc, #376]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	4a5d      	ldr	r2, [pc, #372]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001e2e:	f043 0301 	orr.w	r3, r3, #1
 8001e32:	6213      	str	r3, [r2, #32]
 8001e34:	e00b      	b.n	8001e4e <HAL_RCC_OscConfig+0x36e>
 8001e36:	4b5b      	ldr	r3, [pc, #364]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001e38:	6a1b      	ldr	r3, [r3, #32]
 8001e3a:	4a5a      	ldr	r2, [pc, #360]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001e3c:	f023 0301 	bic.w	r3, r3, #1
 8001e40:	6213      	str	r3, [r2, #32]
 8001e42:	4b58      	ldr	r3, [pc, #352]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001e44:	6a1b      	ldr	r3, [r3, #32]
 8001e46:	4a57      	ldr	r2, [pc, #348]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001e48:	f023 0304 	bic.w	r3, r3, #4
 8001e4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d015      	beq.n	8001e82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e56:	f7ff fb73 	bl	8001540 <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e5c:	e00a      	b.n	8001e74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e5e:	f7ff fb6f 	bl	8001540 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e0b1      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e74:	4b4b      	ldr	r3, [pc, #300]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d0ee      	beq.n	8001e5e <HAL_RCC_OscConfig+0x37e>
 8001e80:	e014      	b.n	8001eac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e82:	f7ff fb5d 	bl	8001540 <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e88:	e00a      	b.n	8001ea0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e8a:	f7ff fb59 	bl	8001540 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e09b      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ea0:	4b40      	ldr	r3, [pc, #256]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1ee      	bne.n	8001e8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001eac:	7dfb      	ldrb	r3, [r7, #23]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d105      	bne.n	8001ebe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb2:	4b3c      	ldr	r3, [pc, #240]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	4a3b      	ldr	r2, [pc, #236]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001eb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ebc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 8087 	beq.w	8001fd6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ec8:	4b36      	ldr	r3, [pc, #216]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 030c 	and.w	r3, r3, #12
 8001ed0:	2b08      	cmp	r3, #8
 8001ed2:	d061      	beq.n	8001f98 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d146      	bne.n	8001f6a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001edc:	4b33      	ldr	r3, [pc, #204]	; (8001fac <HAL_RCC_OscConfig+0x4cc>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee2:	f7ff fb2d 	bl	8001540 <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eea:	f7ff fb29 	bl	8001540 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e06d      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001efc:	4b29      	ldr	r3, [pc, #164]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1f0      	bne.n	8001eea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f10:	d108      	bne.n	8001f24 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f12:	4b24      	ldr	r3, [pc, #144]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	4921      	ldr	r1, [pc, #132]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f24:	4b1f      	ldr	r3, [pc, #124]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a19      	ldr	r1, [r3, #32]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f34:	430b      	orrs	r3, r1
 8001f36:	491b      	ldr	r1, [pc, #108]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f3c:	4b1b      	ldr	r3, [pc, #108]	; (8001fac <HAL_RCC_OscConfig+0x4cc>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f42:	f7ff fafd 	bl	8001540 <HAL_GetTick>
 8001f46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f48:	e008      	b.n	8001f5c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f4a:	f7ff faf9 	bl	8001540 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e03d      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f5c:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0f0      	beq.n	8001f4a <HAL_RCC_OscConfig+0x46a>
 8001f68:	e035      	b.n	8001fd6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f6a:	4b10      	ldr	r3, [pc, #64]	; (8001fac <HAL_RCC_OscConfig+0x4cc>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f70:	f7ff fae6 	bl	8001540 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f78:	f7ff fae2 	bl	8001540 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e026      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f8a:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <HAL_RCC_OscConfig+0x4c4>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1f0      	bne.n	8001f78 <HAL_RCC_OscConfig+0x498>
 8001f96:	e01e      	b.n	8001fd6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d107      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e019      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4f8>
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40007000 	.word	0x40007000
 8001fac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <HAL_RCC_OscConfig+0x500>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d106      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d001      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e000      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40021000 	.word	0x40021000

08001fe4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e0d0      	b.n	800219a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ff8:	4b6a      	ldr	r3, [pc, #424]	; (80021a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	429a      	cmp	r2, r3
 8002004:	d910      	bls.n	8002028 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002006:	4b67      	ldr	r3, [pc, #412]	; (80021a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f023 0207 	bic.w	r2, r3, #7
 800200e:	4965      	ldr	r1, [pc, #404]	; (80021a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	4313      	orrs	r3, r2
 8002014:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002016:	4b63      	ldr	r3, [pc, #396]	; (80021a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	429a      	cmp	r2, r3
 8002022:	d001      	beq.n	8002028 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e0b8      	b.n	800219a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d020      	beq.n	8002076 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	2b00      	cmp	r3, #0
 800203e:	d005      	beq.n	800204c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002040:	4b59      	ldr	r3, [pc, #356]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	4a58      	ldr	r2, [pc, #352]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002046:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800204a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0308 	and.w	r3, r3, #8
 8002054:	2b00      	cmp	r3, #0
 8002056:	d005      	beq.n	8002064 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002058:	4b53      	ldr	r3, [pc, #332]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	4a52      	ldr	r2, [pc, #328]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 800205e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002062:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002064:	4b50      	ldr	r3, [pc, #320]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	494d      	ldr	r1, [pc, #308]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002072:	4313      	orrs	r3, r2
 8002074:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b00      	cmp	r3, #0
 8002080:	d040      	beq.n	8002104 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d107      	bne.n	800209a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208a:	4b47      	ldr	r3, [pc, #284]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d115      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e07f      	b.n	800219a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d107      	bne.n	80020b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020a2:	4b41      	ldr	r3, [pc, #260]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d109      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e073      	b.n	800219a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b2:	4b3d      	ldr	r3, [pc, #244]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e06b      	b.n	800219a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020c2:	4b39      	ldr	r3, [pc, #228]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f023 0203 	bic.w	r2, r3, #3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	4936      	ldr	r1, [pc, #216]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020d4:	f7ff fa34 	bl	8001540 <HAL_GetTick>
 80020d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020da:	e00a      	b.n	80020f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020dc:	f7ff fa30 	bl	8001540 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e053      	b.n	800219a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020f2:	4b2d      	ldr	r3, [pc, #180]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 020c 	and.w	r2, r3, #12
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	429a      	cmp	r2, r3
 8002102:	d1eb      	bne.n	80020dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002104:	4b27      	ldr	r3, [pc, #156]	; (80021a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0307 	and.w	r3, r3, #7
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	429a      	cmp	r2, r3
 8002110:	d210      	bcs.n	8002134 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002112:	4b24      	ldr	r3, [pc, #144]	; (80021a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f023 0207 	bic.w	r2, r3, #7
 800211a:	4922      	ldr	r1, [pc, #136]	; (80021a4 <HAL_RCC_ClockConfig+0x1c0>)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	4313      	orrs	r3, r2
 8002120:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002122:	4b20      	ldr	r3, [pc, #128]	; (80021a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	429a      	cmp	r2, r3
 800212e:	d001      	beq.n	8002134 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e032      	b.n	800219a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	2b00      	cmp	r3, #0
 800213e:	d008      	beq.n	8002152 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002140:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	4916      	ldr	r1, [pc, #88]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 800214e:	4313      	orrs	r3, r2
 8002150:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	2b00      	cmp	r3, #0
 800215c:	d009      	beq.n	8002172 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800215e:	4b12      	ldr	r3, [pc, #72]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	490e      	ldr	r1, [pc, #56]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 800216e:	4313      	orrs	r3, r2
 8002170:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002172:	f000 f821 	bl	80021b8 <HAL_RCC_GetSysClockFreq>
 8002176:	4602      	mov	r2, r0
 8002178:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <HAL_RCC_ClockConfig+0x1c4>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	091b      	lsrs	r3, r3, #4
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	490a      	ldr	r1, [pc, #40]	; (80021ac <HAL_RCC_ClockConfig+0x1c8>)
 8002184:	5ccb      	ldrb	r3, [r1, r3]
 8002186:	fa22 f303 	lsr.w	r3, r2, r3
 800218a:	4a09      	ldr	r2, [pc, #36]	; (80021b0 <HAL_RCC_ClockConfig+0x1cc>)
 800218c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800218e:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <HAL_RCC_ClockConfig+0x1d0>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff f992 	bl	80014bc <HAL_InitTick>

  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40022000 	.word	0x40022000
 80021a8:	40021000 	.word	0x40021000
 80021ac:	080036c0 	.word	0x080036c0
 80021b0:	20000000 	.word	0x20000000
 80021b4:	20000004 	.word	0x20000004

080021b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021b8:	b490      	push	{r4, r7}
 80021ba:	b08a      	sub	sp, #40	; 0x28
 80021bc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021be:	4b29      	ldr	r3, [pc, #164]	; (8002264 <HAL_RCC_GetSysClockFreq+0xac>)
 80021c0:	1d3c      	adds	r4, r7, #4
 80021c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021c8:	f240 2301 	movw	r3, #513	; 0x201
 80021cc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61fb      	str	r3, [r7, #28]
 80021d2:	2300      	movs	r3, #0
 80021d4:	61bb      	str	r3, [r7, #24]
 80021d6:	2300      	movs	r3, #0
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021de:	2300      	movs	r3, #0
 80021e0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021e2:	4b21      	ldr	r3, [pc, #132]	; (8002268 <HAL_RCC_GetSysClockFreq+0xb0>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f003 030c 	and.w	r3, r3, #12
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	d002      	beq.n	80021f8 <HAL_RCC_GetSysClockFreq+0x40>
 80021f2:	2b08      	cmp	r3, #8
 80021f4:	d003      	beq.n	80021fe <HAL_RCC_GetSysClockFreq+0x46>
 80021f6:	e02b      	b.n	8002250 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021f8:	4b1c      	ldr	r3, [pc, #112]	; (800226c <HAL_RCC_GetSysClockFreq+0xb4>)
 80021fa:	623b      	str	r3, [r7, #32]
      break;
 80021fc:	e02b      	b.n	8002256 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	0c9b      	lsrs	r3, r3, #18
 8002202:	f003 030f 	and.w	r3, r3, #15
 8002206:	3328      	adds	r3, #40	; 0x28
 8002208:	443b      	add	r3, r7
 800220a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800220e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d012      	beq.n	8002240 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800221a:	4b13      	ldr	r3, [pc, #76]	; (8002268 <HAL_RCC_GetSysClockFreq+0xb0>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	0c5b      	lsrs	r3, r3, #17
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	3328      	adds	r3, #40	; 0x28
 8002226:	443b      	add	r3, r7
 8002228:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800222c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	4a0e      	ldr	r2, [pc, #56]	; (800226c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002232:	fb03 f202 	mul.w	r2, r3, r2
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	fbb2 f3f3 	udiv	r3, r2, r3
 800223c:	627b      	str	r3, [r7, #36]	; 0x24
 800223e:	e004      	b.n	800224a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	4a0b      	ldr	r2, [pc, #44]	; (8002270 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002244:	fb02 f303 	mul.w	r3, r2, r3
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224c:	623b      	str	r3, [r7, #32]
      break;
 800224e:	e002      	b.n	8002256 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002250:	4b06      	ldr	r3, [pc, #24]	; (800226c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002252:	623b      	str	r3, [r7, #32]
      break;
 8002254:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002256:	6a3b      	ldr	r3, [r7, #32]
}
 8002258:	4618      	mov	r0, r3
 800225a:	3728      	adds	r7, #40	; 0x28
 800225c:	46bd      	mov	sp, r7
 800225e:	bc90      	pop	{r4, r7}
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	080036b0 	.word	0x080036b0
 8002268:	40021000 	.word	0x40021000
 800226c:	007a1200 	.word	0x007a1200
 8002270:	003d0900 	.word	0x003d0900

08002274 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800227c:	4b0a      	ldr	r3, [pc, #40]	; (80022a8 <RCC_Delay+0x34>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a0a      	ldr	r2, [pc, #40]	; (80022ac <RCC_Delay+0x38>)
 8002282:	fba2 2303 	umull	r2, r3, r2, r3
 8002286:	0a5b      	lsrs	r3, r3, #9
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	fb02 f303 	mul.w	r3, r2, r3
 800228e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002290:	bf00      	nop
  }
  while (Delay --);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	1e5a      	subs	r2, r3, #1
 8002296:	60fa      	str	r2, [r7, #12]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1f9      	bne.n	8002290 <RCC_Delay+0x1c>
}
 800229c:	bf00      	nop
 800229e:	bf00      	nop
 80022a0:	3714      	adds	r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr
 80022a8:	20000000 	.word	0x20000000
 80022ac:	10624dd3 	.word	0x10624dd3

080022b0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e041      	b.n	8002346 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d106      	bne.n	80022dc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f7fe fffe 	bl	80012d8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2202      	movs	r2, #2
 80022e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3304      	adds	r3, #4
 80022ec:	4619      	mov	r1, r3
 80022ee:	4610      	mov	r0, r2
 80022f0:	f000 fb30 	bl	8002954 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d104      	bne.n	800236a <HAL_TIM_IC_Start_IT+0x1a>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002366:	b2db      	uxtb	r3, r3
 8002368:	e013      	b.n	8002392 <HAL_TIM_IC_Start_IT+0x42>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	2b04      	cmp	r3, #4
 800236e:	d104      	bne.n	800237a <HAL_TIM_IC_Start_IT+0x2a>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002376:	b2db      	uxtb	r3, r3
 8002378:	e00b      	b.n	8002392 <HAL_TIM_IC_Start_IT+0x42>
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	2b08      	cmp	r3, #8
 800237e:	d104      	bne.n	800238a <HAL_TIM_IC_Start_IT+0x3a>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002386:	b2db      	uxtb	r3, r3
 8002388:	e003      	b.n	8002392 <HAL_TIM_IC_Start_IT+0x42>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002390:	b2db      	uxtb	r3, r3
 8002392:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d104      	bne.n	80023a4 <HAL_TIM_IC_Start_IT+0x54>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	e013      	b.n	80023cc <HAL_TIM_IC_Start_IT+0x7c>
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	d104      	bne.n	80023b4 <HAL_TIM_IC_Start_IT+0x64>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	e00b      	b.n	80023cc <HAL_TIM_IC_Start_IT+0x7c>
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	2b08      	cmp	r3, #8
 80023b8:	d104      	bne.n	80023c4 <HAL_TIM_IC_Start_IT+0x74>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	e003      	b.n	80023cc <HAL_TIM_IC_Start_IT+0x7c>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80023ce:	7bfb      	ldrb	r3, [r7, #15]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d102      	bne.n	80023da <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80023d4:	7bbb      	ldrb	r3, [r7, #14]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d001      	beq.n	80023de <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e0ae      	b.n	800253c <HAL_TIM_IC_Start_IT+0x1ec>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d104      	bne.n	80023ee <HAL_TIM_IC_Start_IT+0x9e>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2202      	movs	r2, #2
 80023e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023ec:	e013      	b.n	8002416 <HAL_TIM_IC_Start_IT+0xc6>
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	2b04      	cmp	r3, #4
 80023f2:	d104      	bne.n	80023fe <HAL_TIM_IC_Start_IT+0xae>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2202      	movs	r2, #2
 80023f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023fc:	e00b      	b.n	8002416 <HAL_TIM_IC_Start_IT+0xc6>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	2b08      	cmp	r3, #8
 8002402:	d104      	bne.n	800240e <HAL_TIM_IC_Start_IT+0xbe>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2202      	movs	r2, #2
 8002408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800240c:	e003      	b.n	8002416 <HAL_TIM_IC_Start_IT+0xc6>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2202      	movs	r2, #2
 8002412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d104      	bne.n	8002426 <HAL_TIM_IC_Start_IT+0xd6>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2202      	movs	r2, #2
 8002420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002424:	e013      	b.n	800244e <HAL_TIM_IC_Start_IT+0xfe>
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	2b04      	cmp	r3, #4
 800242a:	d104      	bne.n	8002436 <HAL_TIM_IC_Start_IT+0xe6>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2202      	movs	r2, #2
 8002430:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002434:	e00b      	b.n	800244e <HAL_TIM_IC_Start_IT+0xfe>
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	2b08      	cmp	r3, #8
 800243a:	d104      	bne.n	8002446 <HAL_TIM_IC_Start_IT+0xf6>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2202      	movs	r2, #2
 8002440:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002444:	e003      	b.n	800244e <HAL_TIM_IC_Start_IT+0xfe>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2202      	movs	r2, #2
 800244a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	2b0c      	cmp	r3, #12
 8002452:	d841      	bhi.n	80024d8 <HAL_TIM_IC_Start_IT+0x188>
 8002454:	a201      	add	r2, pc, #4	; (adr r2, 800245c <HAL_TIM_IC_Start_IT+0x10c>)
 8002456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245a:	bf00      	nop
 800245c:	08002491 	.word	0x08002491
 8002460:	080024d9 	.word	0x080024d9
 8002464:	080024d9 	.word	0x080024d9
 8002468:	080024d9 	.word	0x080024d9
 800246c:	080024a3 	.word	0x080024a3
 8002470:	080024d9 	.word	0x080024d9
 8002474:	080024d9 	.word	0x080024d9
 8002478:	080024d9 	.word	0x080024d9
 800247c:	080024b5 	.word	0x080024b5
 8002480:	080024d9 	.word	0x080024d9
 8002484:	080024d9 	.word	0x080024d9
 8002488:	080024d9 	.word	0x080024d9
 800248c:	080024c7 	.word	0x080024c7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68da      	ldr	r2, [r3, #12]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f042 0202 	orr.w	r2, r2, #2
 800249e:	60da      	str	r2, [r3, #12]
      break;
 80024a0:	e01b      	b.n	80024da <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68da      	ldr	r2, [r3, #12]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f042 0204 	orr.w	r2, r2, #4
 80024b0:	60da      	str	r2, [r3, #12]
      break;
 80024b2:	e012      	b.n	80024da <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68da      	ldr	r2, [r3, #12]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f042 0208 	orr.w	r2, r2, #8
 80024c2:	60da      	str	r2, [r3, #12]
      break;
 80024c4:	e009      	b.n	80024da <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68da      	ldr	r2, [r3, #12]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f042 0210 	orr.w	r2, r2, #16
 80024d4:	60da      	str	r2, [r3, #12]
      break;
 80024d6:	e000      	b.n	80024da <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 80024d8:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2201      	movs	r2, #1
 80024e0:	6839      	ldr	r1, [r7, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 fb95 	bl	8002c12 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a15      	ldr	r2, [pc, #84]	; (8002544 <HAL_TIM_IC_Start_IT+0x1f4>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d009      	beq.n	8002506 <HAL_TIM_IC_Start_IT+0x1b6>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024fa:	d004      	beq.n	8002506 <HAL_TIM_IC_Start_IT+0x1b6>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a11      	ldr	r2, [pc, #68]	; (8002548 <HAL_TIM_IC_Start_IT+0x1f8>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d111      	bne.n	800252a <HAL_TIM_IC_Start_IT+0x1da>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	2b06      	cmp	r3, #6
 8002516:	d010      	beq.n	800253a <HAL_TIM_IC_Start_IT+0x1ea>
    {
      __HAL_TIM_ENABLE(htim);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 0201 	orr.w	r2, r2, #1
 8002526:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002528:	e007      	b.n	800253a <HAL_TIM_IC_Start_IT+0x1ea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f042 0201 	orr.w	r2, r2, #1
 8002538:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40012c00 	.word	0x40012c00
 8002548:	40000400 	.word	0x40000400

0800254c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b02      	cmp	r3, #2
 8002560:	d122      	bne.n	80025a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b02      	cmp	r3, #2
 800256e:	d11b      	bne.n	80025a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f06f 0202 	mvn.w	r2, #2
 8002578:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2201      	movs	r2, #1
 800257e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7fe fbfa 	bl	8000d88 <HAL_TIM_IC_CaptureCallback>
 8002594:	e005      	b.n	80025a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f9c1 	bl	800291e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 f9c7 	bl	8002930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	f003 0304 	and.w	r3, r3, #4
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	d122      	bne.n	80025fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b04      	cmp	r3, #4
 80025c2:	d11b      	bne.n	80025fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f06f 0204 	mvn.w	r2, #4
 80025cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2202      	movs	r2, #2
 80025d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f7fe fbd0 	bl	8000d88 <HAL_TIM_IC_CaptureCallback>
 80025e8:	e005      	b.n	80025f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f997 	bl	800291e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 f99d 	bl	8002930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	f003 0308 	and.w	r3, r3, #8
 8002606:	2b08      	cmp	r3, #8
 8002608:	d122      	bne.n	8002650 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	f003 0308 	and.w	r3, r3, #8
 8002614:	2b08      	cmp	r3, #8
 8002616:	d11b      	bne.n	8002650 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f06f 0208 	mvn.w	r2, #8
 8002620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2204      	movs	r2, #4
 8002626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f7fe fba6 	bl	8000d88 <HAL_TIM_IC_CaptureCallback>
 800263c:	e005      	b.n	800264a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f96d 	bl	800291e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 f973 	bl	8002930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	f003 0310 	and.w	r3, r3, #16
 800265a:	2b10      	cmp	r3, #16
 800265c:	d122      	bne.n	80026a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	f003 0310 	and.w	r3, r3, #16
 8002668:	2b10      	cmp	r3, #16
 800266a:	d11b      	bne.n	80026a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f06f 0210 	mvn.w	r2, #16
 8002674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2208      	movs	r2, #8
 800267a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	69db      	ldr	r3, [r3, #28]
 8002682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7fe fb7c 	bl	8000d88 <HAL_TIM_IC_CaptureCallback>
 8002690:	e005      	b.n	800269e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f943 	bl	800291e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 f949 	bl	8002930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d10e      	bne.n	80026d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d107      	bne.n	80026d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f06f 0201 	mvn.w	r2, #1
 80026c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f91e 	bl	800290c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026da:	2b80      	cmp	r3, #128	; 0x80
 80026dc:	d10e      	bne.n	80026fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e8:	2b80      	cmp	r3, #128	; 0x80
 80026ea:	d107      	bne.n	80026fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 fb11 	bl	8002d1e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002706:	2b40      	cmp	r3, #64	; 0x40
 8002708:	d10e      	bne.n	8002728 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002714:	2b40      	cmp	r3, #64	; 0x40
 8002716:	d107      	bne.n	8002728 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 f90d 	bl	8002942 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	f003 0320 	and.w	r3, r3, #32
 8002732:	2b20      	cmp	r3, #32
 8002734:	d10e      	bne.n	8002754 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	f003 0320 	and.w	r3, r3, #32
 8002740:	2b20      	cmp	r3, #32
 8002742:	d107      	bne.n	8002754 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f06f 0220 	mvn.w	r2, #32
 800274c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 fadc 	bl	8002d0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002754:	bf00      	nop
 8002756:	3708      	adds	r7, #8
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800276e:	2b01      	cmp	r3, #1
 8002770:	d101      	bne.n	8002776 <HAL_TIM_IC_ConfigChannel+0x1a>
 8002772:	2302      	movs	r3, #2
 8002774:	e082      	b.n	800287c <HAL_TIM_IC_ConfigChannel+0x120>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d11b      	bne.n	80027bc <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6818      	ldr	r0, [r3, #0]
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	6819      	ldr	r1, [r3, #0]
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	685a      	ldr	r2, [r3, #4]
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	f000 f936 	bl	8002a04 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	699a      	ldr	r2, [r3, #24]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 020c 	bic.w	r2, r2, #12
 80027a6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6999      	ldr	r1, [r3, #24]
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	689a      	ldr	r2, [r3, #8]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	619a      	str	r2, [r3, #24]
 80027ba:	e05a      	b.n	8002872 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b04      	cmp	r3, #4
 80027c0:	d11c      	bne.n	80027fc <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6818      	ldr	r0, [r3, #0]
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	6819      	ldr	r1, [r3, #0]
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	f000 f96b 	bl	8002aac <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	699a      	ldr	r2, [r3, #24]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80027e4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6999      	ldr	r1, [r3, #24]
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	021a      	lsls	r2, r3, #8
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	619a      	str	r2, [r3, #24]
 80027fa:	e03a      	b.n	8002872 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b08      	cmp	r3, #8
 8002800:	d11b      	bne.n	800283a <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6818      	ldr	r0, [r3, #0]
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	6819      	ldr	r1, [r3, #0]
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	685a      	ldr	r2, [r3, #4]
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	f000 f987 	bl	8002b24 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	69da      	ldr	r2, [r3, #28]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 020c 	bic.w	r2, r2, #12
 8002824:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	69d9      	ldr	r1, [r3, #28]
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	61da      	str	r2, [r3, #28]
 8002838:	e01b      	b.n	8002872 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6818      	ldr	r0, [r3, #0]
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	6819      	ldr	r1, [r3, #0]
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	f000 f9a6 	bl	8002b9a <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	69da      	ldr	r2, [r3, #28]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800285c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	69d9      	ldr	r1, [r3, #28]
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	021a      	lsls	r2, r3, #8
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800288e:	2300      	movs	r3, #0
 8002890:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	2b0c      	cmp	r3, #12
 8002896:	d831      	bhi.n	80028fc <HAL_TIM_ReadCapturedValue+0x78>
 8002898:	a201      	add	r2, pc, #4	; (adr r2, 80028a0 <HAL_TIM_ReadCapturedValue+0x1c>)
 800289a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800289e:	bf00      	nop
 80028a0:	080028d5 	.word	0x080028d5
 80028a4:	080028fd 	.word	0x080028fd
 80028a8:	080028fd 	.word	0x080028fd
 80028ac:	080028fd 	.word	0x080028fd
 80028b0:	080028df 	.word	0x080028df
 80028b4:	080028fd 	.word	0x080028fd
 80028b8:	080028fd 	.word	0x080028fd
 80028bc:	080028fd 	.word	0x080028fd
 80028c0:	080028e9 	.word	0x080028e9
 80028c4:	080028fd 	.word	0x080028fd
 80028c8:	080028fd 	.word	0x080028fd
 80028cc:	080028fd 	.word	0x080028fd
 80028d0:	080028f3 	.word	0x080028f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028da:	60fb      	str	r3, [r7, #12]

      break;
 80028dc:	e00f      	b.n	80028fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e4:	60fb      	str	r3, [r7, #12]

      break;
 80028e6:	e00a      	b.n	80028fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ee:	60fb      	str	r3, [r7, #12]

      break;
 80028f0:	e005      	b.n	80028fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f8:	60fb      	str	r3, [r7, #12]

      break;
 80028fa:	e000      	b.n	80028fe <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80028fc:	bf00      	nop
  }

  return tmpreg;
 80028fe:	68fb      	ldr	r3, [r7, #12]
}
 8002900:	4618      	mov	r0, r3
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop

0800290c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	bc80      	pop	{r7}
 800291c:	4770      	bx	lr

0800291e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr

08002930 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	bc80      	pop	{r7}
 8002940:	4770      	bx	lr

08002942 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	bc80      	pop	{r7}
 8002952:	4770      	bx	lr

08002954 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a25      	ldr	r2, [pc, #148]	; (80029fc <TIM_Base_SetConfig+0xa8>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d007      	beq.n	800297c <TIM_Base_SetConfig+0x28>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002972:	d003      	beq.n	800297c <TIM_Base_SetConfig+0x28>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a22      	ldr	r2, [pc, #136]	; (8002a00 <TIM_Base_SetConfig+0xac>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d108      	bne.n	800298e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002982:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	4313      	orrs	r3, r2
 800298c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a1a      	ldr	r2, [pc, #104]	; (80029fc <TIM_Base_SetConfig+0xa8>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d007      	beq.n	80029a6 <TIM_Base_SetConfig+0x52>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800299c:	d003      	beq.n	80029a6 <TIM_Base_SetConfig+0x52>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a17      	ldr	r2, [pc, #92]	; (8002a00 <TIM_Base_SetConfig+0xac>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d108      	bne.n	80029b8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a07      	ldr	r2, [pc, #28]	; (80029fc <TIM_Base_SetConfig+0xa8>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d103      	bne.n	80029ec <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	691a      	ldr	r2, [r3, #16]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	615a      	str	r2, [r3, #20]
}
 80029f2:	bf00      	nop
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr
 80029fc:	40012c00 	.word	0x40012c00
 8002a00:	40000400 	.word	0x40000400

08002a04 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b087      	sub	sp, #28
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
 8002a10:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	f023 0201 	bic.w	r2, r3, #1
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	4a1d      	ldr	r2, [pc, #116]	; (8002aa4 <TIM_TI1_SetConfig+0xa0>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d007      	beq.n	8002a42 <TIM_TI1_SetConfig+0x3e>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a38:	d003      	beq.n	8002a42 <TIM_TI1_SetConfig+0x3e>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	4a1a      	ldr	r2, [pc, #104]	; (8002aa8 <TIM_TI1_SetConfig+0xa4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d101      	bne.n	8002a46 <TIM_TI1_SetConfig+0x42>
 8002a42:	2301      	movs	r3, #1
 8002a44:	e000      	b.n	8002a48 <TIM_TI1_SetConfig+0x44>
 8002a46:	2300      	movs	r3, #0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d008      	beq.n	8002a5e <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	f023 0303 	bic.w	r3, r3, #3
 8002a52:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	617b      	str	r3, [r7, #20]
 8002a5c:	e003      	b.n	8002a66 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	f043 0301 	orr.w	r3, r3, #1
 8002a64:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	011b      	lsls	r3, r3, #4
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	f023 030a 	bic.w	r3, r3, #10
 8002a80:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	f003 030a 	and.w	r3, r3, #10
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	621a      	str	r2, [r3, #32]
}
 8002a9a:	bf00      	nop
 8002a9c:	371c      	adds	r7, #28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bc80      	pop	{r7}
 8002aa2:	4770      	bx	lr
 8002aa4:	40012c00 	.word	0x40012c00
 8002aa8:	40000400 	.word	0x40000400

08002aac <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b087      	sub	sp, #28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
 8002ab8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	f023 0210 	bic.w	r2, r3, #16
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6a1b      	ldr	r3, [r3, #32]
 8002ad0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ad8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	021b      	lsls	r3, r3, #8
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002aea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	031b      	lsls	r3, r3, #12
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002afe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	011b      	lsls	r3, r3, #4
 8002b04:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	621a      	str	r2, [r3, #32]
}
 8002b1a:	bf00      	nop
 8002b1c:	371c      	adds	r7, #28
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr

08002b24 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b087      	sub	sp, #28
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
 8002b30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	f023 0303 	bic.w	r3, r3, #3
 8002b50:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b60:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	011b      	lsls	r3, r3, #4
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b74:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	021b      	lsls	r3, r3, #8
 8002b7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	621a      	str	r2, [r3, #32]
}
 8002b90:	bf00      	nop
 8002b92:	371c      	adds	r7, #28
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bc80      	pop	{r7}
 8002b98:	4770      	bx	lr

08002b9a <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b087      	sub	sp, #28
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	60f8      	str	r0, [r7, #12]
 8002ba2:	60b9      	str	r1, [r7, #8]
 8002ba4:	607a      	str	r2, [r7, #4]
 8002ba6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	69db      	ldr	r3, [r3, #28]
 8002bb8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bc6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	021b      	lsls	r3, r3, #8
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bd8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	031b      	lsls	r3, r3, #12
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	697a      	ldr	r2, [r7, #20]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	031b      	lsls	r3, r3, #12
 8002bf2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	621a      	str	r2, [r3, #32]
}
 8002c08:	bf00      	nop
 8002c0a:	371c      	adds	r7, #28
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bc80      	pop	{r7}
 8002c10:	4770      	bx	lr

08002c12 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b087      	sub	sp, #28
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	60f8      	str	r0, [r7, #12]
 8002c1a:	60b9      	str	r1, [r7, #8]
 8002c1c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	f003 031f 	and.w	r3, r3, #31
 8002c24:	2201      	movs	r2, #1
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6a1a      	ldr	r2, [r3, #32]
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	43db      	mvns	r3, r3
 8002c34:	401a      	ands	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6a1a      	ldr	r2, [r3, #32]
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	f003 031f 	and.w	r3, r3, #31
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	621a      	str	r2, [r3, #32]
}
 8002c50:	bf00      	nop
 8002c52:	371c      	adds	r7, #28
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bc80      	pop	{r7}
 8002c58:	4770      	bx	lr
	...

08002c5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d101      	bne.n	8002c74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c70:	2302      	movs	r3, #2
 8002c72:	e041      	b.n	8002cf8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2202      	movs	r2, #2
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a14      	ldr	r2, [pc, #80]	; (8002d04 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d009      	beq.n	8002ccc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc0:	d004      	beq.n	8002ccc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a10      	ldr	r2, [pc, #64]	; (8002d08 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d10c      	bne.n	8002ce6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cd2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	68ba      	ldr	r2, [r7, #8]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3714      	adds	r7, #20
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bc80      	pop	{r7}
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	40012c00 	.word	0x40012c00
 8002d08:	40000400 	.word	0x40000400

08002d0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr

08002d1e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr

08002d30 <__errno>:
 8002d30:	4b01      	ldr	r3, [pc, #4]	; (8002d38 <__errno+0x8>)
 8002d32:	6818      	ldr	r0, [r3, #0]
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	2000000c 	.word	0x2000000c

08002d3c <__libc_init_array>:
 8002d3c:	b570      	push	{r4, r5, r6, lr}
 8002d3e:	2600      	movs	r6, #0
 8002d40:	4d0c      	ldr	r5, [pc, #48]	; (8002d74 <__libc_init_array+0x38>)
 8002d42:	4c0d      	ldr	r4, [pc, #52]	; (8002d78 <__libc_init_array+0x3c>)
 8002d44:	1b64      	subs	r4, r4, r5
 8002d46:	10a4      	asrs	r4, r4, #2
 8002d48:	42a6      	cmp	r6, r4
 8002d4a:	d109      	bne.n	8002d60 <__libc_init_array+0x24>
 8002d4c:	f000 fc9c 	bl	8003688 <_init>
 8002d50:	2600      	movs	r6, #0
 8002d52:	4d0a      	ldr	r5, [pc, #40]	; (8002d7c <__libc_init_array+0x40>)
 8002d54:	4c0a      	ldr	r4, [pc, #40]	; (8002d80 <__libc_init_array+0x44>)
 8002d56:	1b64      	subs	r4, r4, r5
 8002d58:	10a4      	asrs	r4, r4, #2
 8002d5a:	42a6      	cmp	r6, r4
 8002d5c:	d105      	bne.n	8002d6a <__libc_init_array+0x2e>
 8002d5e:	bd70      	pop	{r4, r5, r6, pc}
 8002d60:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d64:	4798      	blx	r3
 8002d66:	3601      	adds	r6, #1
 8002d68:	e7ee      	b.n	8002d48 <__libc_init_array+0xc>
 8002d6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d6e:	4798      	blx	r3
 8002d70:	3601      	adds	r6, #1
 8002d72:	e7f2      	b.n	8002d5a <__libc_init_array+0x1e>
 8002d74:	08003704 	.word	0x08003704
 8002d78:	08003704 	.word	0x08003704
 8002d7c:	08003704 	.word	0x08003704
 8002d80:	08003708 	.word	0x08003708

08002d84 <memset>:
 8002d84:	4603      	mov	r3, r0
 8002d86:	4402      	add	r2, r0
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d100      	bne.n	8002d8e <memset+0xa>
 8002d8c:	4770      	bx	lr
 8002d8e:	f803 1b01 	strb.w	r1, [r3], #1
 8002d92:	e7f9      	b.n	8002d88 <memset+0x4>

08002d94 <siprintf>:
 8002d94:	b40e      	push	{r1, r2, r3}
 8002d96:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002d9a:	b500      	push	{lr}
 8002d9c:	b09c      	sub	sp, #112	; 0x70
 8002d9e:	ab1d      	add	r3, sp, #116	; 0x74
 8002da0:	9002      	str	r0, [sp, #8]
 8002da2:	9006      	str	r0, [sp, #24]
 8002da4:	9107      	str	r1, [sp, #28]
 8002da6:	9104      	str	r1, [sp, #16]
 8002da8:	4808      	ldr	r0, [pc, #32]	; (8002dcc <siprintf+0x38>)
 8002daa:	4909      	ldr	r1, [pc, #36]	; (8002dd0 <siprintf+0x3c>)
 8002dac:	f853 2b04 	ldr.w	r2, [r3], #4
 8002db0:	9105      	str	r1, [sp, #20]
 8002db2:	6800      	ldr	r0, [r0, #0]
 8002db4:	a902      	add	r1, sp, #8
 8002db6:	9301      	str	r3, [sp, #4]
 8002db8:	f000 f868 	bl	8002e8c <_svfiprintf_r>
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	9b02      	ldr	r3, [sp, #8]
 8002dc0:	701a      	strb	r2, [r3, #0]
 8002dc2:	b01c      	add	sp, #112	; 0x70
 8002dc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8002dc8:	b003      	add	sp, #12
 8002dca:	4770      	bx	lr
 8002dcc:	2000000c 	.word	0x2000000c
 8002dd0:	ffff0208 	.word	0xffff0208

08002dd4 <__ssputs_r>:
 8002dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002dd8:	688e      	ldr	r6, [r1, #8]
 8002dda:	4682      	mov	sl, r0
 8002ddc:	429e      	cmp	r6, r3
 8002dde:	460c      	mov	r4, r1
 8002de0:	4690      	mov	r8, r2
 8002de2:	461f      	mov	r7, r3
 8002de4:	d838      	bhi.n	8002e58 <__ssputs_r+0x84>
 8002de6:	898a      	ldrh	r2, [r1, #12]
 8002de8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002dec:	d032      	beq.n	8002e54 <__ssputs_r+0x80>
 8002dee:	6825      	ldr	r5, [r4, #0]
 8002df0:	6909      	ldr	r1, [r1, #16]
 8002df2:	3301      	adds	r3, #1
 8002df4:	eba5 0901 	sub.w	r9, r5, r1
 8002df8:	6965      	ldr	r5, [r4, #20]
 8002dfa:	444b      	add	r3, r9
 8002dfc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002e04:	106d      	asrs	r5, r5, #1
 8002e06:	429d      	cmp	r5, r3
 8002e08:	bf38      	it	cc
 8002e0a:	461d      	movcc	r5, r3
 8002e0c:	0553      	lsls	r3, r2, #21
 8002e0e:	d531      	bpl.n	8002e74 <__ssputs_r+0xa0>
 8002e10:	4629      	mov	r1, r5
 8002e12:	f000 fb6f 	bl	80034f4 <_malloc_r>
 8002e16:	4606      	mov	r6, r0
 8002e18:	b950      	cbnz	r0, 8002e30 <__ssputs_r+0x5c>
 8002e1a:	230c      	movs	r3, #12
 8002e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e20:	f8ca 3000 	str.w	r3, [sl]
 8002e24:	89a3      	ldrh	r3, [r4, #12]
 8002e26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e2a:	81a3      	strh	r3, [r4, #12]
 8002e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e30:	464a      	mov	r2, r9
 8002e32:	6921      	ldr	r1, [r4, #16]
 8002e34:	f000 face 	bl	80033d4 <memcpy>
 8002e38:	89a3      	ldrh	r3, [r4, #12]
 8002e3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002e3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e42:	81a3      	strh	r3, [r4, #12]
 8002e44:	6126      	str	r6, [r4, #16]
 8002e46:	444e      	add	r6, r9
 8002e48:	6026      	str	r6, [r4, #0]
 8002e4a:	463e      	mov	r6, r7
 8002e4c:	6165      	str	r5, [r4, #20]
 8002e4e:	eba5 0509 	sub.w	r5, r5, r9
 8002e52:	60a5      	str	r5, [r4, #8]
 8002e54:	42be      	cmp	r6, r7
 8002e56:	d900      	bls.n	8002e5a <__ssputs_r+0x86>
 8002e58:	463e      	mov	r6, r7
 8002e5a:	4632      	mov	r2, r6
 8002e5c:	4641      	mov	r1, r8
 8002e5e:	6820      	ldr	r0, [r4, #0]
 8002e60:	f000 fac6 	bl	80033f0 <memmove>
 8002e64:	68a3      	ldr	r3, [r4, #8]
 8002e66:	2000      	movs	r0, #0
 8002e68:	1b9b      	subs	r3, r3, r6
 8002e6a:	60a3      	str	r3, [r4, #8]
 8002e6c:	6823      	ldr	r3, [r4, #0]
 8002e6e:	4433      	add	r3, r6
 8002e70:	6023      	str	r3, [r4, #0]
 8002e72:	e7db      	b.n	8002e2c <__ssputs_r+0x58>
 8002e74:	462a      	mov	r2, r5
 8002e76:	f000 fbb1 	bl	80035dc <_realloc_r>
 8002e7a:	4606      	mov	r6, r0
 8002e7c:	2800      	cmp	r0, #0
 8002e7e:	d1e1      	bne.n	8002e44 <__ssputs_r+0x70>
 8002e80:	4650      	mov	r0, sl
 8002e82:	6921      	ldr	r1, [r4, #16]
 8002e84:	f000 face 	bl	8003424 <_free_r>
 8002e88:	e7c7      	b.n	8002e1a <__ssputs_r+0x46>
	...

08002e8c <_svfiprintf_r>:
 8002e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e90:	4698      	mov	r8, r3
 8002e92:	898b      	ldrh	r3, [r1, #12]
 8002e94:	4607      	mov	r7, r0
 8002e96:	061b      	lsls	r3, r3, #24
 8002e98:	460d      	mov	r5, r1
 8002e9a:	4614      	mov	r4, r2
 8002e9c:	b09d      	sub	sp, #116	; 0x74
 8002e9e:	d50e      	bpl.n	8002ebe <_svfiprintf_r+0x32>
 8002ea0:	690b      	ldr	r3, [r1, #16]
 8002ea2:	b963      	cbnz	r3, 8002ebe <_svfiprintf_r+0x32>
 8002ea4:	2140      	movs	r1, #64	; 0x40
 8002ea6:	f000 fb25 	bl	80034f4 <_malloc_r>
 8002eaa:	6028      	str	r0, [r5, #0]
 8002eac:	6128      	str	r0, [r5, #16]
 8002eae:	b920      	cbnz	r0, 8002eba <_svfiprintf_r+0x2e>
 8002eb0:	230c      	movs	r3, #12
 8002eb2:	603b      	str	r3, [r7, #0]
 8002eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002eb8:	e0d1      	b.n	800305e <_svfiprintf_r+0x1d2>
 8002eba:	2340      	movs	r3, #64	; 0x40
 8002ebc:	616b      	str	r3, [r5, #20]
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	9309      	str	r3, [sp, #36]	; 0x24
 8002ec2:	2320      	movs	r3, #32
 8002ec4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002ec8:	2330      	movs	r3, #48	; 0x30
 8002eca:	f04f 0901 	mov.w	r9, #1
 8002ece:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ed2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003078 <_svfiprintf_r+0x1ec>
 8002ed6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002eda:	4623      	mov	r3, r4
 8002edc:	469a      	mov	sl, r3
 8002ede:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ee2:	b10a      	cbz	r2, 8002ee8 <_svfiprintf_r+0x5c>
 8002ee4:	2a25      	cmp	r2, #37	; 0x25
 8002ee6:	d1f9      	bne.n	8002edc <_svfiprintf_r+0x50>
 8002ee8:	ebba 0b04 	subs.w	fp, sl, r4
 8002eec:	d00b      	beq.n	8002f06 <_svfiprintf_r+0x7a>
 8002eee:	465b      	mov	r3, fp
 8002ef0:	4622      	mov	r2, r4
 8002ef2:	4629      	mov	r1, r5
 8002ef4:	4638      	mov	r0, r7
 8002ef6:	f7ff ff6d 	bl	8002dd4 <__ssputs_r>
 8002efa:	3001      	adds	r0, #1
 8002efc:	f000 80aa 	beq.w	8003054 <_svfiprintf_r+0x1c8>
 8002f00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002f02:	445a      	add	r2, fp
 8002f04:	9209      	str	r2, [sp, #36]	; 0x24
 8002f06:	f89a 3000 	ldrb.w	r3, [sl]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 80a2 	beq.w	8003054 <_svfiprintf_r+0x1c8>
 8002f10:	2300      	movs	r3, #0
 8002f12:	f04f 32ff 	mov.w	r2, #4294967295
 8002f16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f1a:	f10a 0a01 	add.w	sl, sl, #1
 8002f1e:	9304      	str	r3, [sp, #16]
 8002f20:	9307      	str	r3, [sp, #28]
 8002f22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002f26:	931a      	str	r3, [sp, #104]	; 0x68
 8002f28:	4654      	mov	r4, sl
 8002f2a:	2205      	movs	r2, #5
 8002f2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f30:	4851      	ldr	r0, [pc, #324]	; (8003078 <_svfiprintf_r+0x1ec>)
 8002f32:	f000 fa41 	bl	80033b8 <memchr>
 8002f36:	9a04      	ldr	r2, [sp, #16]
 8002f38:	b9d8      	cbnz	r0, 8002f72 <_svfiprintf_r+0xe6>
 8002f3a:	06d0      	lsls	r0, r2, #27
 8002f3c:	bf44      	itt	mi
 8002f3e:	2320      	movmi	r3, #32
 8002f40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f44:	0711      	lsls	r1, r2, #28
 8002f46:	bf44      	itt	mi
 8002f48:	232b      	movmi	r3, #43	; 0x2b
 8002f4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002f4e:	f89a 3000 	ldrb.w	r3, [sl]
 8002f52:	2b2a      	cmp	r3, #42	; 0x2a
 8002f54:	d015      	beq.n	8002f82 <_svfiprintf_r+0xf6>
 8002f56:	4654      	mov	r4, sl
 8002f58:	2000      	movs	r0, #0
 8002f5a:	f04f 0c0a 	mov.w	ip, #10
 8002f5e:	9a07      	ldr	r2, [sp, #28]
 8002f60:	4621      	mov	r1, r4
 8002f62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f66:	3b30      	subs	r3, #48	; 0x30
 8002f68:	2b09      	cmp	r3, #9
 8002f6a:	d94e      	bls.n	800300a <_svfiprintf_r+0x17e>
 8002f6c:	b1b0      	cbz	r0, 8002f9c <_svfiprintf_r+0x110>
 8002f6e:	9207      	str	r2, [sp, #28]
 8002f70:	e014      	b.n	8002f9c <_svfiprintf_r+0x110>
 8002f72:	eba0 0308 	sub.w	r3, r0, r8
 8002f76:	fa09 f303 	lsl.w	r3, r9, r3
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	46a2      	mov	sl, r4
 8002f7e:	9304      	str	r3, [sp, #16]
 8002f80:	e7d2      	b.n	8002f28 <_svfiprintf_r+0x9c>
 8002f82:	9b03      	ldr	r3, [sp, #12]
 8002f84:	1d19      	adds	r1, r3, #4
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	9103      	str	r1, [sp, #12]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	bfbb      	ittet	lt
 8002f8e:	425b      	neglt	r3, r3
 8002f90:	f042 0202 	orrlt.w	r2, r2, #2
 8002f94:	9307      	strge	r3, [sp, #28]
 8002f96:	9307      	strlt	r3, [sp, #28]
 8002f98:	bfb8      	it	lt
 8002f9a:	9204      	strlt	r2, [sp, #16]
 8002f9c:	7823      	ldrb	r3, [r4, #0]
 8002f9e:	2b2e      	cmp	r3, #46	; 0x2e
 8002fa0:	d10c      	bne.n	8002fbc <_svfiprintf_r+0x130>
 8002fa2:	7863      	ldrb	r3, [r4, #1]
 8002fa4:	2b2a      	cmp	r3, #42	; 0x2a
 8002fa6:	d135      	bne.n	8003014 <_svfiprintf_r+0x188>
 8002fa8:	9b03      	ldr	r3, [sp, #12]
 8002faa:	3402      	adds	r4, #2
 8002fac:	1d1a      	adds	r2, r3, #4
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	9203      	str	r2, [sp, #12]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	bfb8      	it	lt
 8002fb6:	f04f 33ff 	movlt.w	r3, #4294967295
 8002fba:	9305      	str	r3, [sp, #20]
 8002fbc:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800307c <_svfiprintf_r+0x1f0>
 8002fc0:	2203      	movs	r2, #3
 8002fc2:	4650      	mov	r0, sl
 8002fc4:	7821      	ldrb	r1, [r4, #0]
 8002fc6:	f000 f9f7 	bl	80033b8 <memchr>
 8002fca:	b140      	cbz	r0, 8002fde <_svfiprintf_r+0x152>
 8002fcc:	2340      	movs	r3, #64	; 0x40
 8002fce:	eba0 000a 	sub.w	r0, r0, sl
 8002fd2:	fa03 f000 	lsl.w	r0, r3, r0
 8002fd6:	9b04      	ldr	r3, [sp, #16]
 8002fd8:	3401      	adds	r4, #1
 8002fda:	4303      	orrs	r3, r0
 8002fdc:	9304      	str	r3, [sp, #16]
 8002fde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002fe2:	2206      	movs	r2, #6
 8002fe4:	4826      	ldr	r0, [pc, #152]	; (8003080 <_svfiprintf_r+0x1f4>)
 8002fe6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002fea:	f000 f9e5 	bl	80033b8 <memchr>
 8002fee:	2800      	cmp	r0, #0
 8002ff0:	d038      	beq.n	8003064 <_svfiprintf_r+0x1d8>
 8002ff2:	4b24      	ldr	r3, [pc, #144]	; (8003084 <_svfiprintf_r+0x1f8>)
 8002ff4:	bb1b      	cbnz	r3, 800303e <_svfiprintf_r+0x1b2>
 8002ff6:	9b03      	ldr	r3, [sp, #12]
 8002ff8:	3307      	adds	r3, #7
 8002ffa:	f023 0307 	bic.w	r3, r3, #7
 8002ffe:	3308      	adds	r3, #8
 8003000:	9303      	str	r3, [sp, #12]
 8003002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003004:	4433      	add	r3, r6
 8003006:	9309      	str	r3, [sp, #36]	; 0x24
 8003008:	e767      	b.n	8002eda <_svfiprintf_r+0x4e>
 800300a:	460c      	mov	r4, r1
 800300c:	2001      	movs	r0, #1
 800300e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003012:	e7a5      	b.n	8002f60 <_svfiprintf_r+0xd4>
 8003014:	2300      	movs	r3, #0
 8003016:	f04f 0c0a 	mov.w	ip, #10
 800301a:	4619      	mov	r1, r3
 800301c:	3401      	adds	r4, #1
 800301e:	9305      	str	r3, [sp, #20]
 8003020:	4620      	mov	r0, r4
 8003022:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003026:	3a30      	subs	r2, #48	; 0x30
 8003028:	2a09      	cmp	r2, #9
 800302a:	d903      	bls.n	8003034 <_svfiprintf_r+0x1a8>
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0c5      	beq.n	8002fbc <_svfiprintf_r+0x130>
 8003030:	9105      	str	r1, [sp, #20]
 8003032:	e7c3      	b.n	8002fbc <_svfiprintf_r+0x130>
 8003034:	4604      	mov	r4, r0
 8003036:	2301      	movs	r3, #1
 8003038:	fb0c 2101 	mla	r1, ip, r1, r2
 800303c:	e7f0      	b.n	8003020 <_svfiprintf_r+0x194>
 800303e:	ab03      	add	r3, sp, #12
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	462a      	mov	r2, r5
 8003044:	4638      	mov	r0, r7
 8003046:	4b10      	ldr	r3, [pc, #64]	; (8003088 <_svfiprintf_r+0x1fc>)
 8003048:	a904      	add	r1, sp, #16
 800304a:	f3af 8000 	nop.w
 800304e:	1c42      	adds	r2, r0, #1
 8003050:	4606      	mov	r6, r0
 8003052:	d1d6      	bne.n	8003002 <_svfiprintf_r+0x176>
 8003054:	89ab      	ldrh	r3, [r5, #12]
 8003056:	065b      	lsls	r3, r3, #25
 8003058:	f53f af2c 	bmi.w	8002eb4 <_svfiprintf_r+0x28>
 800305c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800305e:	b01d      	add	sp, #116	; 0x74
 8003060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003064:	ab03      	add	r3, sp, #12
 8003066:	9300      	str	r3, [sp, #0]
 8003068:	462a      	mov	r2, r5
 800306a:	4638      	mov	r0, r7
 800306c:	4b06      	ldr	r3, [pc, #24]	; (8003088 <_svfiprintf_r+0x1fc>)
 800306e:	a904      	add	r1, sp, #16
 8003070:	f000 f87c 	bl	800316c <_printf_i>
 8003074:	e7eb      	b.n	800304e <_svfiprintf_r+0x1c2>
 8003076:	bf00      	nop
 8003078:	080036d0 	.word	0x080036d0
 800307c:	080036d6 	.word	0x080036d6
 8003080:	080036da 	.word	0x080036da
 8003084:	00000000 	.word	0x00000000
 8003088:	08002dd5 	.word	0x08002dd5

0800308c <_printf_common>:
 800308c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003090:	4616      	mov	r6, r2
 8003092:	4699      	mov	r9, r3
 8003094:	688a      	ldr	r2, [r1, #8]
 8003096:	690b      	ldr	r3, [r1, #16]
 8003098:	4607      	mov	r7, r0
 800309a:	4293      	cmp	r3, r2
 800309c:	bfb8      	it	lt
 800309e:	4613      	movlt	r3, r2
 80030a0:	6033      	str	r3, [r6, #0]
 80030a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80030a6:	460c      	mov	r4, r1
 80030a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80030ac:	b10a      	cbz	r2, 80030b2 <_printf_common+0x26>
 80030ae:	3301      	adds	r3, #1
 80030b0:	6033      	str	r3, [r6, #0]
 80030b2:	6823      	ldr	r3, [r4, #0]
 80030b4:	0699      	lsls	r1, r3, #26
 80030b6:	bf42      	ittt	mi
 80030b8:	6833      	ldrmi	r3, [r6, #0]
 80030ba:	3302      	addmi	r3, #2
 80030bc:	6033      	strmi	r3, [r6, #0]
 80030be:	6825      	ldr	r5, [r4, #0]
 80030c0:	f015 0506 	ands.w	r5, r5, #6
 80030c4:	d106      	bne.n	80030d4 <_printf_common+0x48>
 80030c6:	f104 0a19 	add.w	sl, r4, #25
 80030ca:	68e3      	ldr	r3, [r4, #12]
 80030cc:	6832      	ldr	r2, [r6, #0]
 80030ce:	1a9b      	subs	r3, r3, r2
 80030d0:	42ab      	cmp	r3, r5
 80030d2:	dc28      	bgt.n	8003126 <_printf_common+0x9a>
 80030d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80030d8:	1e13      	subs	r3, r2, #0
 80030da:	6822      	ldr	r2, [r4, #0]
 80030dc:	bf18      	it	ne
 80030de:	2301      	movne	r3, #1
 80030e0:	0692      	lsls	r2, r2, #26
 80030e2:	d42d      	bmi.n	8003140 <_printf_common+0xb4>
 80030e4:	4649      	mov	r1, r9
 80030e6:	4638      	mov	r0, r7
 80030e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80030ec:	47c0      	blx	r8
 80030ee:	3001      	adds	r0, #1
 80030f0:	d020      	beq.n	8003134 <_printf_common+0xa8>
 80030f2:	6823      	ldr	r3, [r4, #0]
 80030f4:	68e5      	ldr	r5, [r4, #12]
 80030f6:	f003 0306 	and.w	r3, r3, #6
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	bf18      	it	ne
 80030fe:	2500      	movne	r5, #0
 8003100:	6832      	ldr	r2, [r6, #0]
 8003102:	f04f 0600 	mov.w	r6, #0
 8003106:	68a3      	ldr	r3, [r4, #8]
 8003108:	bf08      	it	eq
 800310a:	1aad      	subeq	r5, r5, r2
 800310c:	6922      	ldr	r2, [r4, #16]
 800310e:	bf08      	it	eq
 8003110:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003114:	4293      	cmp	r3, r2
 8003116:	bfc4      	itt	gt
 8003118:	1a9b      	subgt	r3, r3, r2
 800311a:	18ed      	addgt	r5, r5, r3
 800311c:	341a      	adds	r4, #26
 800311e:	42b5      	cmp	r5, r6
 8003120:	d11a      	bne.n	8003158 <_printf_common+0xcc>
 8003122:	2000      	movs	r0, #0
 8003124:	e008      	b.n	8003138 <_printf_common+0xac>
 8003126:	2301      	movs	r3, #1
 8003128:	4652      	mov	r2, sl
 800312a:	4649      	mov	r1, r9
 800312c:	4638      	mov	r0, r7
 800312e:	47c0      	blx	r8
 8003130:	3001      	adds	r0, #1
 8003132:	d103      	bne.n	800313c <_printf_common+0xb0>
 8003134:	f04f 30ff 	mov.w	r0, #4294967295
 8003138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800313c:	3501      	adds	r5, #1
 800313e:	e7c4      	b.n	80030ca <_printf_common+0x3e>
 8003140:	2030      	movs	r0, #48	; 0x30
 8003142:	18e1      	adds	r1, r4, r3
 8003144:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003148:	1c5a      	adds	r2, r3, #1
 800314a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800314e:	4422      	add	r2, r4
 8003150:	3302      	adds	r3, #2
 8003152:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003156:	e7c5      	b.n	80030e4 <_printf_common+0x58>
 8003158:	2301      	movs	r3, #1
 800315a:	4622      	mov	r2, r4
 800315c:	4649      	mov	r1, r9
 800315e:	4638      	mov	r0, r7
 8003160:	47c0      	blx	r8
 8003162:	3001      	adds	r0, #1
 8003164:	d0e6      	beq.n	8003134 <_printf_common+0xa8>
 8003166:	3601      	adds	r6, #1
 8003168:	e7d9      	b.n	800311e <_printf_common+0x92>
	...

0800316c <_printf_i>:
 800316c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003170:	7e0f      	ldrb	r7, [r1, #24]
 8003172:	4691      	mov	r9, r2
 8003174:	2f78      	cmp	r7, #120	; 0x78
 8003176:	4680      	mov	r8, r0
 8003178:	460c      	mov	r4, r1
 800317a:	469a      	mov	sl, r3
 800317c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800317e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003182:	d807      	bhi.n	8003194 <_printf_i+0x28>
 8003184:	2f62      	cmp	r7, #98	; 0x62
 8003186:	d80a      	bhi.n	800319e <_printf_i+0x32>
 8003188:	2f00      	cmp	r7, #0
 800318a:	f000 80d9 	beq.w	8003340 <_printf_i+0x1d4>
 800318e:	2f58      	cmp	r7, #88	; 0x58
 8003190:	f000 80a4 	beq.w	80032dc <_printf_i+0x170>
 8003194:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003198:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800319c:	e03a      	b.n	8003214 <_printf_i+0xa8>
 800319e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80031a2:	2b15      	cmp	r3, #21
 80031a4:	d8f6      	bhi.n	8003194 <_printf_i+0x28>
 80031a6:	a101      	add	r1, pc, #4	; (adr r1, 80031ac <_printf_i+0x40>)
 80031a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80031ac:	08003205 	.word	0x08003205
 80031b0:	08003219 	.word	0x08003219
 80031b4:	08003195 	.word	0x08003195
 80031b8:	08003195 	.word	0x08003195
 80031bc:	08003195 	.word	0x08003195
 80031c0:	08003195 	.word	0x08003195
 80031c4:	08003219 	.word	0x08003219
 80031c8:	08003195 	.word	0x08003195
 80031cc:	08003195 	.word	0x08003195
 80031d0:	08003195 	.word	0x08003195
 80031d4:	08003195 	.word	0x08003195
 80031d8:	08003327 	.word	0x08003327
 80031dc:	08003249 	.word	0x08003249
 80031e0:	08003309 	.word	0x08003309
 80031e4:	08003195 	.word	0x08003195
 80031e8:	08003195 	.word	0x08003195
 80031ec:	08003349 	.word	0x08003349
 80031f0:	08003195 	.word	0x08003195
 80031f4:	08003249 	.word	0x08003249
 80031f8:	08003195 	.word	0x08003195
 80031fc:	08003195 	.word	0x08003195
 8003200:	08003311 	.word	0x08003311
 8003204:	682b      	ldr	r3, [r5, #0]
 8003206:	1d1a      	adds	r2, r3, #4
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	602a      	str	r2, [r5, #0]
 800320c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003210:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003214:	2301      	movs	r3, #1
 8003216:	e0a4      	b.n	8003362 <_printf_i+0x1f6>
 8003218:	6820      	ldr	r0, [r4, #0]
 800321a:	6829      	ldr	r1, [r5, #0]
 800321c:	0606      	lsls	r6, r0, #24
 800321e:	f101 0304 	add.w	r3, r1, #4
 8003222:	d50a      	bpl.n	800323a <_printf_i+0xce>
 8003224:	680e      	ldr	r6, [r1, #0]
 8003226:	602b      	str	r3, [r5, #0]
 8003228:	2e00      	cmp	r6, #0
 800322a:	da03      	bge.n	8003234 <_printf_i+0xc8>
 800322c:	232d      	movs	r3, #45	; 0x2d
 800322e:	4276      	negs	r6, r6
 8003230:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003234:	230a      	movs	r3, #10
 8003236:	485e      	ldr	r0, [pc, #376]	; (80033b0 <_printf_i+0x244>)
 8003238:	e019      	b.n	800326e <_printf_i+0x102>
 800323a:	680e      	ldr	r6, [r1, #0]
 800323c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003240:	602b      	str	r3, [r5, #0]
 8003242:	bf18      	it	ne
 8003244:	b236      	sxthne	r6, r6
 8003246:	e7ef      	b.n	8003228 <_printf_i+0xbc>
 8003248:	682b      	ldr	r3, [r5, #0]
 800324a:	6820      	ldr	r0, [r4, #0]
 800324c:	1d19      	adds	r1, r3, #4
 800324e:	6029      	str	r1, [r5, #0]
 8003250:	0601      	lsls	r1, r0, #24
 8003252:	d501      	bpl.n	8003258 <_printf_i+0xec>
 8003254:	681e      	ldr	r6, [r3, #0]
 8003256:	e002      	b.n	800325e <_printf_i+0xf2>
 8003258:	0646      	lsls	r6, r0, #25
 800325a:	d5fb      	bpl.n	8003254 <_printf_i+0xe8>
 800325c:	881e      	ldrh	r6, [r3, #0]
 800325e:	2f6f      	cmp	r7, #111	; 0x6f
 8003260:	bf0c      	ite	eq
 8003262:	2308      	moveq	r3, #8
 8003264:	230a      	movne	r3, #10
 8003266:	4852      	ldr	r0, [pc, #328]	; (80033b0 <_printf_i+0x244>)
 8003268:	2100      	movs	r1, #0
 800326a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800326e:	6865      	ldr	r5, [r4, #4]
 8003270:	2d00      	cmp	r5, #0
 8003272:	bfa8      	it	ge
 8003274:	6821      	ldrge	r1, [r4, #0]
 8003276:	60a5      	str	r5, [r4, #8]
 8003278:	bfa4      	itt	ge
 800327a:	f021 0104 	bicge.w	r1, r1, #4
 800327e:	6021      	strge	r1, [r4, #0]
 8003280:	b90e      	cbnz	r6, 8003286 <_printf_i+0x11a>
 8003282:	2d00      	cmp	r5, #0
 8003284:	d04d      	beq.n	8003322 <_printf_i+0x1b6>
 8003286:	4615      	mov	r5, r2
 8003288:	fbb6 f1f3 	udiv	r1, r6, r3
 800328c:	fb03 6711 	mls	r7, r3, r1, r6
 8003290:	5dc7      	ldrb	r7, [r0, r7]
 8003292:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003296:	4637      	mov	r7, r6
 8003298:	42bb      	cmp	r3, r7
 800329a:	460e      	mov	r6, r1
 800329c:	d9f4      	bls.n	8003288 <_printf_i+0x11c>
 800329e:	2b08      	cmp	r3, #8
 80032a0:	d10b      	bne.n	80032ba <_printf_i+0x14e>
 80032a2:	6823      	ldr	r3, [r4, #0]
 80032a4:	07de      	lsls	r6, r3, #31
 80032a6:	d508      	bpl.n	80032ba <_printf_i+0x14e>
 80032a8:	6923      	ldr	r3, [r4, #16]
 80032aa:	6861      	ldr	r1, [r4, #4]
 80032ac:	4299      	cmp	r1, r3
 80032ae:	bfde      	ittt	le
 80032b0:	2330      	movle	r3, #48	; 0x30
 80032b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80032b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80032ba:	1b52      	subs	r2, r2, r5
 80032bc:	6122      	str	r2, [r4, #16]
 80032be:	464b      	mov	r3, r9
 80032c0:	4621      	mov	r1, r4
 80032c2:	4640      	mov	r0, r8
 80032c4:	f8cd a000 	str.w	sl, [sp]
 80032c8:	aa03      	add	r2, sp, #12
 80032ca:	f7ff fedf 	bl	800308c <_printf_common>
 80032ce:	3001      	adds	r0, #1
 80032d0:	d14c      	bne.n	800336c <_printf_i+0x200>
 80032d2:	f04f 30ff 	mov.w	r0, #4294967295
 80032d6:	b004      	add	sp, #16
 80032d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032dc:	4834      	ldr	r0, [pc, #208]	; (80033b0 <_printf_i+0x244>)
 80032de:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80032e2:	6829      	ldr	r1, [r5, #0]
 80032e4:	6823      	ldr	r3, [r4, #0]
 80032e6:	f851 6b04 	ldr.w	r6, [r1], #4
 80032ea:	6029      	str	r1, [r5, #0]
 80032ec:	061d      	lsls	r5, r3, #24
 80032ee:	d514      	bpl.n	800331a <_printf_i+0x1ae>
 80032f0:	07df      	lsls	r7, r3, #31
 80032f2:	bf44      	itt	mi
 80032f4:	f043 0320 	orrmi.w	r3, r3, #32
 80032f8:	6023      	strmi	r3, [r4, #0]
 80032fa:	b91e      	cbnz	r6, 8003304 <_printf_i+0x198>
 80032fc:	6823      	ldr	r3, [r4, #0]
 80032fe:	f023 0320 	bic.w	r3, r3, #32
 8003302:	6023      	str	r3, [r4, #0]
 8003304:	2310      	movs	r3, #16
 8003306:	e7af      	b.n	8003268 <_printf_i+0xfc>
 8003308:	6823      	ldr	r3, [r4, #0]
 800330a:	f043 0320 	orr.w	r3, r3, #32
 800330e:	6023      	str	r3, [r4, #0]
 8003310:	2378      	movs	r3, #120	; 0x78
 8003312:	4828      	ldr	r0, [pc, #160]	; (80033b4 <_printf_i+0x248>)
 8003314:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003318:	e7e3      	b.n	80032e2 <_printf_i+0x176>
 800331a:	0659      	lsls	r1, r3, #25
 800331c:	bf48      	it	mi
 800331e:	b2b6      	uxthmi	r6, r6
 8003320:	e7e6      	b.n	80032f0 <_printf_i+0x184>
 8003322:	4615      	mov	r5, r2
 8003324:	e7bb      	b.n	800329e <_printf_i+0x132>
 8003326:	682b      	ldr	r3, [r5, #0]
 8003328:	6826      	ldr	r6, [r4, #0]
 800332a:	1d18      	adds	r0, r3, #4
 800332c:	6961      	ldr	r1, [r4, #20]
 800332e:	6028      	str	r0, [r5, #0]
 8003330:	0635      	lsls	r5, r6, #24
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	d501      	bpl.n	800333a <_printf_i+0x1ce>
 8003336:	6019      	str	r1, [r3, #0]
 8003338:	e002      	b.n	8003340 <_printf_i+0x1d4>
 800333a:	0670      	lsls	r0, r6, #25
 800333c:	d5fb      	bpl.n	8003336 <_printf_i+0x1ca>
 800333e:	8019      	strh	r1, [r3, #0]
 8003340:	2300      	movs	r3, #0
 8003342:	4615      	mov	r5, r2
 8003344:	6123      	str	r3, [r4, #16]
 8003346:	e7ba      	b.n	80032be <_printf_i+0x152>
 8003348:	682b      	ldr	r3, [r5, #0]
 800334a:	2100      	movs	r1, #0
 800334c:	1d1a      	adds	r2, r3, #4
 800334e:	602a      	str	r2, [r5, #0]
 8003350:	681d      	ldr	r5, [r3, #0]
 8003352:	6862      	ldr	r2, [r4, #4]
 8003354:	4628      	mov	r0, r5
 8003356:	f000 f82f 	bl	80033b8 <memchr>
 800335a:	b108      	cbz	r0, 8003360 <_printf_i+0x1f4>
 800335c:	1b40      	subs	r0, r0, r5
 800335e:	6060      	str	r0, [r4, #4]
 8003360:	6863      	ldr	r3, [r4, #4]
 8003362:	6123      	str	r3, [r4, #16]
 8003364:	2300      	movs	r3, #0
 8003366:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800336a:	e7a8      	b.n	80032be <_printf_i+0x152>
 800336c:	462a      	mov	r2, r5
 800336e:	4649      	mov	r1, r9
 8003370:	4640      	mov	r0, r8
 8003372:	6923      	ldr	r3, [r4, #16]
 8003374:	47d0      	blx	sl
 8003376:	3001      	adds	r0, #1
 8003378:	d0ab      	beq.n	80032d2 <_printf_i+0x166>
 800337a:	6823      	ldr	r3, [r4, #0]
 800337c:	079b      	lsls	r3, r3, #30
 800337e:	d413      	bmi.n	80033a8 <_printf_i+0x23c>
 8003380:	68e0      	ldr	r0, [r4, #12]
 8003382:	9b03      	ldr	r3, [sp, #12]
 8003384:	4298      	cmp	r0, r3
 8003386:	bfb8      	it	lt
 8003388:	4618      	movlt	r0, r3
 800338a:	e7a4      	b.n	80032d6 <_printf_i+0x16a>
 800338c:	2301      	movs	r3, #1
 800338e:	4632      	mov	r2, r6
 8003390:	4649      	mov	r1, r9
 8003392:	4640      	mov	r0, r8
 8003394:	47d0      	blx	sl
 8003396:	3001      	adds	r0, #1
 8003398:	d09b      	beq.n	80032d2 <_printf_i+0x166>
 800339a:	3501      	adds	r5, #1
 800339c:	68e3      	ldr	r3, [r4, #12]
 800339e:	9903      	ldr	r1, [sp, #12]
 80033a0:	1a5b      	subs	r3, r3, r1
 80033a2:	42ab      	cmp	r3, r5
 80033a4:	dcf2      	bgt.n	800338c <_printf_i+0x220>
 80033a6:	e7eb      	b.n	8003380 <_printf_i+0x214>
 80033a8:	2500      	movs	r5, #0
 80033aa:	f104 0619 	add.w	r6, r4, #25
 80033ae:	e7f5      	b.n	800339c <_printf_i+0x230>
 80033b0:	080036e1 	.word	0x080036e1
 80033b4:	080036f2 	.word	0x080036f2

080033b8 <memchr>:
 80033b8:	4603      	mov	r3, r0
 80033ba:	b510      	push	{r4, lr}
 80033bc:	b2c9      	uxtb	r1, r1
 80033be:	4402      	add	r2, r0
 80033c0:	4293      	cmp	r3, r2
 80033c2:	4618      	mov	r0, r3
 80033c4:	d101      	bne.n	80033ca <memchr+0x12>
 80033c6:	2000      	movs	r0, #0
 80033c8:	e003      	b.n	80033d2 <memchr+0x1a>
 80033ca:	7804      	ldrb	r4, [r0, #0]
 80033cc:	3301      	adds	r3, #1
 80033ce:	428c      	cmp	r4, r1
 80033d0:	d1f6      	bne.n	80033c0 <memchr+0x8>
 80033d2:	bd10      	pop	{r4, pc}

080033d4 <memcpy>:
 80033d4:	440a      	add	r2, r1
 80033d6:	4291      	cmp	r1, r2
 80033d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80033dc:	d100      	bne.n	80033e0 <memcpy+0xc>
 80033de:	4770      	bx	lr
 80033e0:	b510      	push	{r4, lr}
 80033e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80033e6:	4291      	cmp	r1, r2
 80033e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80033ec:	d1f9      	bne.n	80033e2 <memcpy+0xe>
 80033ee:	bd10      	pop	{r4, pc}

080033f0 <memmove>:
 80033f0:	4288      	cmp	r0, r1
 80033f2:	b510      	push	{r4, lr}
 80033f4:	eb01 0402 	add.w	r4, r1, r2
 80033f8:	d902      	bls.n	8003400 <memmove+0x10>
 80033fa:	4284      	cmp	r4, r0
 80033fc:	4623      	mov	r3, r4
 80033fe:	d807      	bhi.n	8003410 <memmove+0x20>
 8003400:	1e43      	subs	r3, r0, #1
 8003402:	42a1      	cmp	r1, r4
 8003404:	d008      	beq.n	8003418 <memmove+0x28>
 8003406:	f811 2b01 	ldrb.w	r2, [r1], #1
 800340a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800340e:	e7f8      	b.n	8003402 <memmove+0x12>
 8003410:	4601      	mov	r1, r0
 8003412:	4402      	add	r2, r0
 8003414:	428a      	cmp	r2, r1
 8003416:	d100      	bne.n	800341a <memmove+0x2a>
 8003418:	bd10      	pop	{r4, pc}
 800341a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800341e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003422:	e7f7      	b.n	8003414 <memmove+0x24>

08003424 <_free_r>:
 8003424:	b538      	push	{r3, r4, r5, lr}
 8003426:	4605      	mov	r5, r0
 8003428:	2900      	cmp	r1, #0
 800342a:	d040      	beq.n	80034ae <_free_r+0x8a>
 800342c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003430:	1f0c      	subs	r4, r1, #4
 8003432:	2b00      	cmp	r3, #0
 8003434:	bfb8      	it	lt
 8003436:	18e4      	addlt	r4, r4, r3
 8003438:	f000 f910 	bl	800365c <__malloc_lock>
 800343c:	4a1c      	ldr	r2, [pc, #112]	; (80034b0 <_free_r+0x8c>)
 800343e:	6813      	ldr	r3, [r2, #0]
 8003440:	b933      	cbnz	r3, 8003450 <_free_r+0x2c>
 8003442:	6063      	str	r3, [r4, #4]
 8003444:	6014      	str	r4, [r2, #0]
 8003446:	4628      	mov	r0, r5
 8003448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800344c:	f000 b90c 	b.w	8003668 <__malloc_unlock>
 8003450:	42a3      	cmp	r3, r4
 8003452:	d908      	bls.n	8003466 <_free_r+0x42>
 8003454:	6820      	ldr	r0, [r4, #0]
 8003456:	1821      	adds	r1, r4, r0
 8003458:	428b      	cmp	r3, r1
 800345a:	bf01      	itttt	eq
 800345c:	6819      	ldreq	r1, [r3, #0]
 800345e:	685b      	ldreq	r3, [r3, #4]
 8003460:	1809      	addeq	r1, r1, r0
 8003462:	6021      	streq	r1, [r4, #0]
 8003464:	e7ed      	b.n	8003442 <_free_r+0x1e>
 8003466:	461a      	mov	r2, r3
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	b10b      	cbz	r3, 8003470 <_free_r+0x4c>
 800346c:	42a3      	cmp	r3, r4
 800346e:	d9fa      	bls.n	8003466 <_free_r+0x42>
 8003470:	6811      	ldr	r1, [r2, #0]
 8003472:	1850      	adds	r0, r2, r1
 8003474:	42a0      	cmp	r0, r4
 8003476:	d10b      	bne.n	8003490 <_free_r+0x6c>
 8003478:	6820      	ldr	r0, [r4, #0]
 800347a:	4401      	add	r1, r0
 800347c:	1850      	adds	r0, r2, r1
 800347e:	4283      	cmp	r3, r0
 8003480:	6011      	str	r1, [r2, #0]
 8003482:	d1e0      	bne.n	8003446 <_free_r+0x22>
 8003484:	6818      	ldr	r0, [r3, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	4401      	add	r1, r0
 800348a:	6011      	str	r1, [r2, #0]
 800348c:	6053      	str	r3, [r2, #4]
 800348e:	e7da      	b.n	8003446 <_free_r+0x22>
 8003490:	d902      	bls.n	8003498 <_free_r+0x74>
 8003492:	230c      	movs	r3, #12
 8003494:	602b      	str	r3, [r5, #0]
 8003496:	e7d6      	b.n	8003446 <_free_r+0x22>
 8003498:	6820      	ldr	r0, [r4, #0]
 800349a:	1821      	adds	r1, r4, r0
 800349c:	428b      	cmp	r3, r1
 800349e:	bf01      	itttt	eq
 80034a0:	6819      	ldreq	r1, [r3, #0]
 80034a2:	685b      	ldreq	r3, [r3, #4]
 80034a4:	1809      	addeq	r1, r1, r0
 80034a6:	6021      	streq	r1, [r4, #0]
 80034a8:	6063      	str	r3, [r4, #4]
 80034aa:	6054      	str	r4, [r2, #4]
 80034ac:	e7cb      	b.n	8003446 <_free_r+0x22>
 80034ae:	bd38      	pop	{r3, r4, r5, pc}
 80034b0:	200000ec 	.word	0x200000ec

080034b4 <sbrk_aligned>:
 80034b4:	b570      	push	{r4, r5, r6, lr}
 80034b6:	4e0e      	ldr	r6, [pc, #56]	; (80034f0 <sbrk_aligned+0x3c>)
 80034b8:	460c      	mov	r4, r1
 80034ba:	6831      	ldr	r1, [r6, #0]
 80034bc:	4605      	mov	r5, r0
 80034be:	b911      	cbnz	r1, 80034c6 <sbrk_aligned+0x12>
 80034c0:	f000 f8bc 	bl	800363c <_sbrk_r>
 80034c4:	6030      	str	r0, [r6, #0]
 80034c6:	4621      	mov	r1, r4
 80034c8:	4628      	mov	r0, r5
 80034ca:	f000 f8b7 	bl	800363c <_sbrk_r>
 80034ce:	1c43      	adds	r3, r0, #1
 80034d0:	d00a      	beq.n	80034e8 <sbrk_aligned+0x34>
 80034d2:	1cc4      	adds	r4, r0, #3
 80034d4:	f024 0403 	bic.w	r4, r4, #3
 80034d8:	42a0      	cmp	r0, r4
 80034da:	d007      	beq.n	80034ec <sbrk_aligned+0x38>
 80034dc:	1a21      	subs	r1, r4, r0
 80034de:	4628      	mov	r0, r5
 80034e0:	f000 f8ac 	bl	800363c <_sbrk_r>
 80034e4:	3001      	adds	r0, #1
 80034e6:	d101      	bne.n	80034ec <sbrk_aligned+0x38>
 80034e8:	f04f 34ff 	mov.w	r4, #4294967295
 80034ec:	4620      	mov	r0, r4
 80034ee:	bd70      	pop	{r4, r5, r6, pc}
 80034f0:	200000f0 	.word	0x200000f0

080034f4 <_malloc_r>:
 80034f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034f8:	1ccd      	adds	r5, r1, #3
 80034fa:	f025 0503 	bic.w	r5, r5, #3
 80034fe:	3508      	adds	r5, #8
 8003500:	2d0c      	cmp	r5, #12
 8003502:	bf38      	it	cc
 8003504:	250c      	movcc	r5, #12
 8003506:	2d00      	cmp	r5, #0
 8003508:	4607      	mov	r7, r0
 800350a:	db01      	blt.n	8003510 <_malloc_r+0x1c>
 800350c:	42a9      	cmp	r1, r5
 800350e:	d905      	bls.n	800351c <_malloc_r+0x28>
 8003510:	230c      	movs	r3, #12
 8003512:	2600      	movs	r6, #0
 8003514:	603b      	str	r3, [r7, #0]
 8003516:	4630      	mov	r0, r6
 8003518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800351c:	4e2e      	ldr	r6, [pc, #184]	; (80035d8 <_malloc_r+0xe4>)
 800351e:	f000 f89d 	bl	800365c <__malloc_lock>
 8003522:	6833      	ldr	r3, [r6, #0]
 8003524:	461c      	mov	r4, r3
 8003526:	bb34      	cbnz	r4, 8003576 <_malloc_r+0x82>
 8003528:	4629      	mov	r1, r5
 800352a:	4638      	mov	r0, r7
 800352c:	f7ff ffc2 	bl	80034b4 <sbrk_aligned>
 8003530:	1c43      	adds	r3, r0, #1
 8003532:	4604      	mov	r4, r0
 8003534:	d14d      	bne.n	80035d2 <_malloc_r+0xde>
 8003536:	6834      	ldr	r4, [r6, #0]
 8003538:	4626      	mov	r6, r4
 800353a:	2e00      	cmp	r6, #0
 800353c:	d140      	bne.n	80035c0 <_malloc_r+0xcc>
 800353e:	6823      	ldr	r3, [r4, #0]
 8003540:	4631      	mov	r1, r6
 8003542:	4638      	mov	r0, r7
 8003544:	eb04 0803 	add.w	r8, r4, r3
 8003548:	f000 f878 	bl	800363c <_sbrk_r>
 800354c:	4580      	cmp	r8, r0
 800354e:	d13a      	bne.n	80035c6 <_malloc_r+0xd2>
 8003550:	6821      	ldr	r1, [r4, #0]
 8003552:	3503      	adds	r5, #3
 8003554:	1a6d      	subs	r5, r5, r1
 8003556:	f025 0503 	bic.w	r5, r5, #3
 800355a:	3508      	adds	r5, #8
 800355c:	2d0c      	cmp	r5, #12
 800355e:	bf38      	it	cc
 8003560:	250c      	movcc	r5, #12
 8003562:	4638      	mov	r0, r7
 8003564:	4629      	mov	r1, r5
 8003566:	f7ff ffa5 	bl	80034b4 <sbrk_aligned>
 800356a:	3001      	adds	r0, #1
 800356c:	d02b      	beq.n	80035c6 <_malloc_r+0xd2>
 800356e:	6823      	ldr	r3, [r4, #0]
 8003570:	442b      	add	r3, r5
 8003572:	6023      	str	r3, [r4, #0]
 8003574:	e00e      	b.n	8003594 <_malloc_r+0xa0>
 8003576:	6822      	ldr	r2, [r4, #0]
 8003578:	1b52      	subs	r2, r2, r5
 800357a:	d41e      	bmi.n	80035ba <_malloc_r+0xc6>
 800357c:	2a0b      	cmp	r2, #11
 800357e:	d916      	bls.n	80035ae <_malloc_r+0xba>
 8003580:	1961      	adds	r1, r4, r5
 8003582:	42a3      	cmp	r3, r4
 8003584:	6025      	str	r5, [r4, #0]
 8003586:	bf18      	it	ne
 8003588:	6059      	strne	r1, [r3, #4]
 800358a:	6863      	ldr	r3, [r4, #4]
 800358c:	bf08      	it	eq
 800358e:	6031      	streq	r1, [r6, #0]
 8003590:	5162      	str	r2, [r4, r5]
 8003592:	604b      	str	r3, [r1, #4]
 8003594:	4638      	mov	r0, r7
 8003596:	f104 060b 	add.w	r6, r4, #11
 800359a:	f000 f865 	bl	8003668 <__malloc_unlock>
 800359e:	f026 0607 	bic.w	r6, r6, #7
 80035a2:	1d23      	adds	r3, r4, #4
 80035a4:	1af2      	subs	r2, r6, r3
 80035a6:	d0b6      	beq.n	8003516 <_malloc_r+0x22>
 80035a8:	1b9b      	subs	r3, r3, r6
 80035aa:	50a3      	str	r3, [r4, r2]
 80035ac:	e7b3      	b.n	8003516 <_malloc_r+0x22>
 80035ae:	6862      	ldr	r2, [r4, #4]
 80035b0:	42a3      	cmp	r3, r4
 80035b2:	bf0c      	ite	eq
 80035b4:	6032      	streq	r2, [r6, #0]
 80035b6:	605a      	strne	r2, [r3, #4]
 80035b8:	e7ec      	b.n	8003594 <_malloc_r+0xa0>
 80035ba:	4623      	mov	r3, r4
 80035bc:	6864      	ldr	r4, [r4, #4]
 80035be:	e7b2      	b.n	8003526 <_malloc_r+0x32>
 80035c0:	4634      	mov	r4, r6
 80035c2:	6876      	ldr	r6, [r6, #4]
 80035c4:	e7b9      	b.n	800353a <_malloc_r+0x46>
 80035c6:	230c      	movs	r3, #12
 80035c8:	4638      	mov	r0, r7
 80035ca:	603b      	str	r3, [r7, #0]
 80035cc:	f000 f84c 	bl	8003668 <__malloc_unlock>
 80035d0:	e7a1      	b.n	8003516 <_malloc_r+0x22>
 80035d2:	6025      	str	r5, [r4, #0]
 80035d4:	e7de      	b.n	8003594 <_malloc_r+0xa0>
 80035d6:	bf00      	nop
 80035d8:	200000ec 	.word	0x200000ec

080035dc <_realloc_r>:
 80035dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035e0:	4680      	mov	r8, r0
 80035e2:	4614      	mov	r4, r2
 80035e4:	460e      	mov	r6, r1
 80035e6:	b921      	cbnz	r1, 80035f2 <_realloc_r+0x16>
 80035e8:	4611      	mov	r1, r2
 80035ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80035ee:	f7ff bf81 	b.w	80034f4 <_malloc_r>
 80035f2:	b92a      	cbnz	r2, 8003600 <_realloc_r+0x24>
 80035f4:	f7ff ff16 	bl	8003424 <_free_r>
 80035f8:	4625      	mov	r5, r4
 80035fa:	4628      	mov	r0, r5
 80035fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003600:	f000 f838 	bl	8003674 <_malloc_usable_size_r>
 8003604:	4284      	cmp	r4, r0
 8003606:	4607      	mov	r7, r0
 8003608:	d802      	bhi.n	8003610 <_realloc_r+0x34>
 800360a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800360e:	d812      	bhi.n	8003636 <_realloc_r+0x5a>
 8003610:	4621      	mov	r1, r4
 8003612:	4640      	mov	r0, r8
 8003614:	f7ff ff6e 	bl	80034f4 <_malloc_r>
 8003618:	4605      	mov	r5, r0
 800361a:	2800      	cmp	r0, #0
 800361c:	d0ed      	beq.n	80035fa <_realloc_r+0x1e>
 800361e:	42bc      	cmp	r4, r7
 8003620:	4622      	mov	r2, r4
 8003622:	4631      	mov	r1, r6
 8003624:	bf28      	it	cs
 8003626:	463a      	movcs	r2, r7
 8003628:	f7ff fed4 	bl	80033d4 <memcpy>
 800362c:	4631      	mov	r1, r6
 800362e:	4640      	mov	r0, r8
 8003630:	f7ff fef8 	bl	8003424 <_free_r>
 8003634:	e7e1      	b.n	80035fa <_realloc_r+0x1e>
 8003636:	4635      	mov	r5, r6
 8003638:	e7df      	b.n	80035fa <_realloc_r+0x1e>
	...

0800363c <_sbrk_r>:
 800363c:	b538      	push	{r3, r4, r5, lr}
 800363e:	2300      	movs	r3, #0
 8003640:	4d05      	ldr	r5, [pc, #20]	; (8003658 <_sbrk_r+0x1c>)
 8003642:	4604      	mov	r4, r0
 8003644:	4608      	mov	r0, r1
 8003646:	602b      	str	r3, [r5, #0]
 8003648:	f7fd fec0 	bl	80013cc <_sbrk>
 800364c:	1c43      	adds	r3, r0, #1
 800364e:	d102      	bne.n	8003656 <_sbrk_r+0x1a>
 8003650:	682b      	ldr	r3, [r5, #0]
 8003652:	b103      	cbz	r3, 8003656 <_sbrk_r+0x1a>
 8003654:	6023      	str	r3, [r4, #0]
 8003656:	bd38      	pop	{r3, r4, r5, pc}
 8003658:	200000f4 	.word	0x200000f4

0800365c <__malloc_lock>:
 800365c:	4801      	ldr	r0, [pc, #4]	; (8003664 <__malloc_lock+0x8>)
 800365e:	f000 b811 	b.w	8003684 <__retarget_lock_acquire_recursive>
 8003662:	bf00      	nop
 8003664:	200000f8 	.word	0x200000f8

08003668 <__malloc_unlock>:
 8003668:	4801      	ldr	r0, [pc, #4]	; (8003670 <__malloc_unlock+0x8>)
 800366a:	f000 b80c 	b.w	8003686 <__retarget_lock_release_recursive>
 800366e:	bf00      	nop
 8003670:	200000f8 	.word	0x200000f8

08003674 <_malloc_usable_size_r>:
 8003674:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003678:	1f18      	subs	r0, r3, #4
 800367a:	2b00      	cmp	r3, #0
 800367c:	bfbc      	itt	lt
 800367e:	580b      	ldrlt	r3, [r1, r0]
 8003680:	18c0      	addlt	r0, r0, r3
 8003682:	4770      	bx	lr

08003684 <__retarget_lock_acquire_recursive>:
 8003684:	4770      	bx	lr

08003686 <__retarget_lock_release_recursive>:
 8003686:	4770      	bx	lr

08003688 <_init>:
 8003688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800368a:	bf00      	nop
 800368c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800368e:	bc08      	pop	{r3}
 8003690:	469e      	mov	lr, r3
 8003692:	4770      	bx	lr

08003694 <_fini>:
 8003694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003696:	bf00      	nop
 8003698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800369a:	bc08      	pop	{r3}
 800369c:	469e      	mov	lr, r3
 800369e:	4770      	bx	lr
